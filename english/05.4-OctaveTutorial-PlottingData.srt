1
00:00:00,180 --> 00:00:02,380
When developing learning algorithms, very

2
00:00:02,390 --> 00:00:04,190
often a few simple plots

3
00:00:04,200 --> 00:00:05,250
can give you a better

4
00:00:05,260 --> 00:00:06,560
sense of what the algorithm

5
00:00:06,570 --> 00:00:08,400
is doing and just sanity check

6
00:00:08,410 --> 00:00:09,500
that everything is going okay

7
00:00:09,510 --> 00:00:12,400
and the algorithms doing what is supposed to.

8
00:00:12,410 --> 00:00:13,910
For example, in an earlier

9
00:00:13,920 --> 00:00:15,210
video, I talked about how

10
00:00:15,220 --> 00:00:16,790
plotting the cost function J

11
00:00:16,800 --> 00:00:18,420
of theta can help you

12
00:00:18,430 --> 00:00:21,560
make sure that gradient descent is converging.

13
00:00:21,600 --> 00:00:23,060
Often, plus of the data

14
00:00:23,070 --> 00:00:24,800
or of all the learning algorithm outputs

15
00:00:24,810 --> 00:00:26,390
will also give you ideas

16
00:00:26,400 --> 00:00:29,260
for how to improve your learning algorithm.

17
00:00:29,360 --> 00:00:31,320
Fortunately, Octave has very

18
00:00:31,330 --> 00:00:33,060
simple tools to generate lots

19
00:00:33,070 --> 00:00:34,510
of different plots and when

20
00:00:34,520 --> 00:00:36,480
I use learning algorithms, I find

21
00:00:36,490 --> 00:00:38,060
that plotting the data, plotting

22
00:00:38,070 --> 00:00:40,160
the learning algorithm and so

23
00:00:40,170 --> 00:00:42,050
on are often an important

24
00:00:42,060 --> 00:00:43,140
part of how I get

25
00:00:43,150 --> 00:00:45,970
ideas for improving the

26
00:00:45,980 --> 00:00:47,150
algorithms and in this video,

27
00:00:47,160 --> 00:00:48,460
I'd like to show you some

28
00:00:48,470 --> 00:00:52,750
of these Octave tools for plotting and visualizing your data.

29
00:00:53,700 --> 00:00:55,220
Here's my Octave window.

30
00:00:55,230 --> 00:00:57,830
Let's quickly generate some data

31
00:00:57,840 --> 00:00:58,570
for us to plot.

32
00:00:58,580 --> 00:00:59,730
So I'm going to set T

33
00:00:59,740 --> 00:01:02,200
to be equal to, you know, this array of numbers.

34
00:01:02,210 --> 00:01:03,790
Here's T, set of

35
00:01:03,800 --> 00:01:06,690
numbers going from 0 up to .98.

36
00:01:06,700 --> 00:01:09,050
Let's set y1 equals sine

37
00:01:09,060 --> 00:01:12,530
of 2 pie 40 and

38
00:01:12,540 --> 00:01:16,060
if I want to plot the sine function, it's very easy.

39
00:01:16,070 --> 00:01:17,870
I just type plot T comma Y

40
00:01:17,880 --> 00:01:20,310
1 and hit enter.

41
00:01:20,320 --> 00:01:22,210
And up comes this plot

42
00:01:22,220 --> 00:01:24,210
where the horizontal axis is

43
00:01:24,220 --> 00:01:25,500
the T variable and the vertical

44
00:01:25,510 --> 00:01:26,950
axis is y1, which

45
00:01:26,960 --> 00:01:30,400
is the sine you saw in the function that we just computed.

46
00:01:30,990 --> 00:01:32,260
Let's set y2 to be

47
00:01:32,270 --> 00:01:34,400
equal to the cosine

48
00:01:34,410 --> 00:01:38,740
of two pi, four T, like so.

49
00:01:38,750 --> 00:01:41,670
And if I plot

50
00:01:41,680 --> 00:01:43,780
T comma y2, what octave

51
00:01:43,790 --> 00:01:45,050
will I do is I'll take my

52
00:01:45,060 --> 00:01:46,920
sine plot and it

53
00:01:46,930 --> 00:01:48,680
will replace with this cosine

54
00:01:48,690 --> 00:01:51,320
function and now, you know, cosine of xi of 1.

55
00:01:51,330 --> 00:01:53,000
Now, what if I

56
00:01:53,010 --> 00:01:54,600
want to have both

57
00:01:54,610 --> 00:01:56,980
the sine and the cosine plots on top of each other?

58
00:01:56,990 --> 00:01:59,590
What I'm going to do is I'm

59
00:01:59,600 --> 00:02:01,130
going to type plot t,y1.

60
00:02:01,140 --> 00:02:03,320
So here's my sine function, and then

61
00:02:03,330 --> 00:02:06,910
I'm going to use the function hold on.

62
00:02:06,920 --> 00:02:08,910
And what hold does it closes

63
00:02:08,920 --> 00:02:10,260
octaves to now

64
00:02:10,270 --> 00:02:11,470
figures on top of the

65
00:02:11,480 --> 00:02:13,710
old one and let

66
00:02:13,720 --> 00:02:15,230
me now plot t y2.

67
00:02:15,240 --> 00:02:19,650
I'm going to plot the cosine function in a different color.

68
00:02:19,850 --> 00:02:22,170
So, let me put there

69
00:02:22,180 --> 00:02:24,080
r in quotation marks there

70
00:02:24,090 --> 00:02:25,290
and instead of replacing

71
00:02:25,300 --> 00:02:26,610
the current figure, I'll plot the

72
00:02:26,620 --> 00:02:28,470
cosine function on top and

73
00:02:28,480 --> 00:02:32,960
the r indicates the what is an event color.

74
00:02:33,700 --> 00:02:35,100
And here additional commands - x

75
00:02:35,110 --> 00:02:39,150
label times, to label the X axis, or the horizontal axis.

76
00:02:39,160 --> 00:02:41,420
And Y label values A,

77
00:02:41,430 --> 00:02:44,940
to label the vertical axis value,

78
00:02:44,950 --> 00:02:47,470
and I can also

79
00:02:55,640 --> 00:02:57,610
label my two lines

80
00:02:57,620 --> 00:03:01,500
with this command: legend sine cosine

81
00:03:01,510 --> 00:03:02,880
and this puts this

82
00:03:02,890 --> 00:03:04,060
legend up on the upper

83
00:03:04,070 --> 00:03:05,100
right showing what the 2

84
00:03:05,110 --> 00:03:08,280
lines are, and finally title

85
00:03:08,290 --> 00:03:12,730
my plot is the title at the top of this figure.

86
00:03:12,750 --> 00:03:13,770
Lastly, if you want to save

87
00:03:13,780 --> 00:03:16,420
this figure, you type print -dpng

88
00:03:18,110 --> 00:03:19,610
myplot.png.

89
00:03:20,070 --> 00:03:21,370


90
00:03:21,380 --> 00:03:23,240
So PNG is a graphics

91
00:03:23,250 --> 00:03:25,140
file format, and if you

92
00:03:25,150 --> 00:03:27,600
do this it will let you save this as a file.

93
00:03:27,610 --> 00:03:28,910
If I do that,

94
00:03:28,920 --> 00:03:31,310
let me actually change directory to,

95
00:03:31,320 --> 00:03:35,120
let's see, like

96
00:03:35,130 --> 00:03:39,220
that, and then I will print that out.

97
00:03:39,230 --> 00:03:41,690
So this will take a

98
00:03:41,700 --> 00:03:43,880
while depending on how

99
00:03:43,890 --> 00:03:46,220
your Octave configuration is setup,

100
00:03:46,230 --> 00:03:48,890
may take a few seconds, but change

101
00:03:48,900 --> 00:03:50,700
directory to my desktop and Octave

102
00:03:50,710 --> 00:03:53,720
is now taking a few seconds to save this.

103
00:03:54,750 --> 00:03:57,660
If I now go to my desktop, Let's hide these windows.

104
00:03:57,670 --> 00:03:59,360
Here's myplot.png

105
00:03:59,370 --> 00:04:00,730
which Octave has saved, and you

106
00:04:00,740 --> 00:04:03,450
know, there's the figure saved as the PNG file.

107
00:04:03,460 --> 00:04:05,510
Octave can save thousand other formats as well.

108
00:04:05,520 --> 00:04:07,420
So, you can type help plot,

109
00:04:07,430 --> 00:04:09,500
if you want to see the

110
00:04:09,510 --> 00:04:11,520
other file formats, rather than

111
00:04:11,530 --> 00:04:13,330
PNG, that you can save

112
00:04:13,340 --> 00:04:15,130
figures in.

113
00:04:15,140 --> 00:04:16,460
And lastly, if you want

114
00:04:16,470 --> 00:04:18,530
to get rid of the plot, the

115
00:04:18,540 --> 00:04:23,810
close command causes the figure to go away.

116
00:04:23,820 --> 00:04:24,890
As I figure if I type

117
00:04:24,900 --> 00:04:26,560
close, that figure just

118
00:04:26,570 --> 00:04:29,530
disappeared from my desktop.

119
00:04:30,640 --> 00:04:33,340
Octave also lets you specify a figure and numbers.

120
00:04:33,350 --> 00:04:36,830
You type figure 1 plots t, y1.

121
00:04:36,840 --> 00:04:39,660
That starts up

122
00:04:39,670 --> 00:04:41,960
first figure, and that plots t, y1.

123
00:04:41,970 --> 00:04:45,020
And then if you want a second figure, you specify a different figure number.

124
00:04:45,030 --> 00:04:47,770
So figure two, plot t,

125
00:04:47,780 --> 00:04:49,910
y2 like so, and

126
00:04:49,920 --> 00:04:53,070
now on my desktop, I actually have 2 figures.

127
00:04:53,080 --> 00:04:54,510
So, figure 1 and figure

128
00:04:54,520 --> 00:04:55,820
2 thus 1 plotting the sine

129
00:04:55,830 --> 00:04:59,160
function, 1 plotting the cosine function.

130
00:04:59,170 --> 00:05:00,440
Here's one other neat command that

131
00:05:00,450 --> 00:05:02,800
I often use, which is the subplot command.

132
00:05:02,810 --> 00:05:05,370
So, we're going to use subplot 1 2 1.

133
00:05:05,380 --> 00:05:07,920
What it does it sub-divides

134
00:05:07,930 --> 00:05:11,770
the plot into a

135
00:05:11,780 --> 00:05:13,810
one-by-two grid with the

136
00:05:13,820 --> 00:05:15,970
first 2 parameters are, and

137
00:05:15,980 --> 00:05:17,610
it starts to access the

138
00:05:17,620 --> 00:05:19,330
first element. That's

139
00:05:19,340 --> 00:05:22,270
what the final parameter 1 is, right?

140
00:05:22,280 --> 00:05:23,540
So, divide my figure into a

141
00:05:23,550 --> 00:05:24,900
one by two grid, and I

142
00:05:24,910 --> 00:05:26,550
want to access the first

143
00:05:26,560 --> 00:05:27,960
element right now.

144
00:05:27,970 --> 00:05:30,410
And so, if I type that

145
00:05:30,420 --> 00:05:32,750
in, this product, this figure, is on the left.

146
00:05:32,760 --> 00:05:35,340
And if I plot t,

147
00:05:35,350 --> 00:05:37,670
y1, it now fills

148
00:05:37,680 --> 00:05:40,430
up this first element.

149
00:05:40,440 --> 00:05:42,520
And if I I'll do subplot 122.

150
00:05:42,530 --> 00:05:44,440
I'm going to start to

151
00:05:44,450 --> 00:05:49,260
access the second element and plot t, y2.

152
00:05:49,270 --> 00:05:51,260
Well, throw in y2 in

153
00:05:51,270 --> 00:05:54,790
the right hand side, or in the second element.

154
00:05:54,910 --> 00:05:56,090
And last command, you can

155
00:05:56,100 --> 00:05:58,150
also change the axis scales

156
00:05:58,160 --> 00:06:00,320
and change axis these to 1.51

157
00:06:00,330 --> 00:06:02,870
minus 1 1 and this

158
00:06:02,880 --> 00:06:05,030
sets the x range

159
00:06:05,040 --> 00:06:07,400
and y range for the

160
00:06:07,410 --> 00:06:09,880
figure on the right,

161
00:06:09,890 --> 00:06:12,360
and concretely, it assess the horizontal

162
00:06:12,370 --> 00:06:13,660
major values in the figure

163
00:06:13,670 --> 00:06:14,770
on the right to make sure 0.5

164
00:06:14,780 --> 00:06:16,330
to 1, and the vertical

165
00:06:16,340 --> 00:06:19,560
axis values use the range from minus one to one.

166
00:06:19,570 --> 00:06:21,620
And, you know, you don't need to memorize all these commands.

167
00:06:21,630 --> 00:06:23,140
If you ever need to

168
00:06:23,150 --> 00:06:24,770
change the access or you

169
00:06:24,780 --> 00:06:25,670
need to know is that, you know, there's an

170
00:06:25,680 --> 00:06:26,580
access command and you can

171
00:06:26,590 --> 00:06:28,300
already get the details

172
00:06:28,310 --> 00:06:31,590
from the usual octave help command.

173
00:06:31,600 --> 00:06:32,850
Finally, just a couple last

174
00:06:32,860 --> 00:06:35,440
commands CLF clear is

175
00:06:35,450 --> 00:06:38,320
a figure and here's one unique trait.

176
00:06:38,330 --> 00:06:39,740
Let's set a to be equal

177
00:06:39,750 --> 00:06:42,040
to a 5 by 5

178
00:06:42,050 --> 00:06:43,370
magic squares a. So, a

179
00:06:43,380 --> 00:06:45,300
is now this 5 by 5

180
00:06:45,310 --> 00:06:47,560
matrix does a neat

181
00:06:47,570 --> 00:06:49,340
trick that I sometimes use to

182
00:06:49,350 --> 00:06:51,500
visualize the matrix, which is

183
00:06:51,510 --> 00:06:54,790
I can use image sc

184
00:06:54,800 --> 00:06:56,360
of a what this will

185
00:06:56,370 --> 00:06:58,000
do is plot a five

186
00:06:58,010 --> 00:07:02,640
by five matrix, a five by five grid of color.

187
00:07:03,900 --> 00:07:05,690
where the different colors correspond to

188
00:07:05,700 --> 00:07:09,050
the different values in the A matrix.

189
00:07:09,060 --> 00:07:13,620
So concretely, I can also do color bar.

190
00:07:13,630 --> 00:07:14,840
Let me use a

191
00:07:14,850 --> 00:07:16,640
more sophisticated command, and image sc

192
00:07:16,650 --> 00:07:20,290
A color bar

193
00:07:20,300 --> 00:07:22,430
color map gray.

194
00:07:22,440 --> 00:07:24,750
This is actually running three commands at a time.

195
00:07:24,760 --> 00:07:26,240
I'm running image sc then running

196
00:07:26,250 --> 00:07:28,910
color bar, then running color map gray.

197
00:07:28,920 --> 00:07:30,150
And what this does, is it sets

198
00:07:30,160 --> 00:07:31,310
a color map, so a

199
00:07:31,320 --> 00:07:32,720
gray color map, and on the

200
00:07:32,730 --> 00:07:35,350
right it also puts in this color bar.

201
00:07:35,360 --> 00:07:37,540
And so this color bar

202
00:07:37,550 --> 00:07:40,710
shows what the different shades of color correspond to.

203
00:07:40,720 --> 00:07:42,690
Concretely, the upper left

204
00:07:42,700 --> 00:07:44,480
element of the A matrix

205
00:07:44,490 --> 00:07:46,300
is 17, and so that corresponds

206
00:07:46,310 --> 00:07:49,200
to kind of a mint shade of gray.

207
00:07:49,210 --> 00:07:51,980
Whereas in contrast the second

208
00:07:51,990 --> 00:07:53,270
element of A--sort of the

209
00:07:53,280 --> 00:07:55,610
1 2 element of A--is 24.

210
00:07:55,620 --> 00:07:57,700
Right, so it's A 1 2 is 24.

211
00:07:57,710 --> 00:07:59,680
So that corresponds to

212
00:07:59,690 --> 00:08:01,350
this square out here, which is

213
00:08:01,360 --> 00:08:03,660
nearly a shade of white.

214
00:08:03,670 --> 00:08:05,680
And the small value, say

215
00:08:05,690 --> 00:08:08,680
A--what is that? A

216
00:08:08,990 --> 00:08:12,290
4 5, you know, is a value

217
00:08:12,300 --> 00:08:14,350
3 over here that corresponds--

218
00:08:14,360 --> 00:08:15,520
you can see on my color bar

219
00:08:15,530 --> 00:08:16,590
that it corresponds to a

220
00:08:16,600 --> 00:08:19,470
much darker shade in this image.

221
00:08:19,480 --> 00:08:21,130
So here's another example,

222
00:08:21,140 --> 00:08:23,220
I can plot a larger, you

223
00:08:23,230 --> 00:08:24,760
know, here's a magic 15 that

224
00:08:24,770 --> 00:08:26,010
gives you a 15 by 15

225
00:08:26,020 --> 00:08:27,670
magic square and this

226
00:08:27,680 --> 00:08:29,460
gives me a plot of what

227
00:08:29,470 --> 00:08:33,690
my 15 by 15 magic squares values looks like.

228
00:08:33,700 --> 00:08:35,150
And finally to wrap

229
00:08:35,160 --> 00:08:36,990
up this video, what you've

230
00:08:37,000 --> 00:08:38,250
seen me do here is

231
00:08:38,260 --> 00:08:41,930
use comma chaining of function calls.

232
00:08:41,940 --> 00:08:43,200
Here's how you actually do this.

233
00:08:43,210 --> 00:08:44,680
If I type A equals

234
00:08:44,690 --> 00:08:46,570
1, B equals 2, C equals

235
00:08:46,580 --> 00:08:48,610
3, and hit Enter, then

236
00:08:48,620 --> 00:08:50,610
this is actually carrying out

237
00:08:50,620 --> 00:08:52,030
three commands at the same time.

238
00:08:52,040 --> 00:08:53,400
Or really carrying out three

239
00:08:53,410 --> 00:08:55,830
commands, one after another,

240
00:08:55,840 --> 00:08:57,490
and it prints out all three results.

241
00:08:57,500 --> 00:08:58,310
And this is a lot like

242
00:08:58,320 --> 00:09:00,440
A equals 1, B equals

243
00:09:00,450 --> 00:09:01,720
2, C equals 3, except

244
00:09:01,730 --> 00:09:03,530
that if I use semicolons instead

245
00:09:03,540 --> 00:09:05,800
of a comma, it doesn't print out anything.

246
00:09:05,810 --> 00:09:07,200
So, this, you know,

247
00:09:07,210 --> 00:09:08,860
this thing here we call comma

248
00:09:08,870 --> 00:09:12,230
chaining of commands, or comma chaining of function calls.

249
00:09:12,240 --> 00:09:13,700
And, it's just another

250
00:09:13,710 --> 00:09:15,430
convenient way in Octave to

251
00:09:15,440 --> 00:09:17,690
put multiple commands like image sc

252
00:09:17,700 --> 00:09:19,350
color bar, colon map

253
00:09:19,360 --> 00:09:22,650
to put multi-commands on the same line.

254
00:09:22,930 --> 00:09:23,980
So, that's it.

255
00:09:23,990 --> 00:09:25,180
You now know how to plot

256
00:09:25,190 --> 00:09:27,450
different figures and octave, and

257
00:09:27,460 --> 00:09:29,270
in next video the

258
00:09:29,280 --> 00:09:30,450
next main piece that I want

259
00:09:30,460 --> 00:09:31,930
to tell you about is how to

260
00:09:31,940 --> 00:09:33,620
write control statements like if,

261
00:09:33,630 --> 00:09:35,220
while, for statements and

262
00:09:35,230 --> 00:09:38,680
octave as well as hard to define and use functions

