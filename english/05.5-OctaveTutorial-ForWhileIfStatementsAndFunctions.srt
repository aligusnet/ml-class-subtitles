1
00:00:00,180 --> 00:00:01,110
In this video, I'd like to

2
00:00:01,120 --> 00:00:02,590
tell you how to write

3
00:00:02,600 --> 00:00:03,830
control statements for your

4
00:00:03,840 --> 00:00:05,690
Octave programs, so things

5
00:00:05,700 --> 00:00:07,340
like "for", "while" and "if" statements

6
00:00:07,350 --> 00:00:11,830
and also how to define and use functions.

7
00:00:12,480 --> 00:00:13,960
Here's my Octave window. Let

8
00:00:13,970 --> 00:00:16,480
me first show you how to use a "for" loop.

9
00:00:16,490 --> 00:00:17,840
I'm going to start by setting v

10
00:00:17,850 --> 00:00:18,860
to be a 10 by

11
00:00:18,870 --> 00:00:20,820
1 vector 0.

12
00:00:20,830 --> 00:00:22,230
Now, here's I write

13
00:00:22,240 --> 00:00:25,080
a "for" loop for I equals 1 to 10.

14
00:00:25,090 --> 00:00:27,550
That's for I equals Y colon 10.

15
00:00:27,560 --> 00:00:29,870
And let's see, I'm

16
00:00:29,880 --> 00:00:31,440
going to set V of I

17
00:00:31,450 --> 00:00:33,210
equals two to the

18
00:00:33,220 --> 00:00:36,640
power of I, and finally

19
00:00:36,720 --> 00:00:37,620
end.

20
00:00:37,630 --> 00:00:39,080
The white space does not matter,

21
00:00:39,090 --> 00:00:40,490
so I am putting the spaces

22
00:00:40,500 --> 00:00:41,980
just to make it look nicely indented,

23
00:00:41,990 --> 00:00:44,410
but you know spacing doesn't matter.

24
00:00:44,420 --> 00:00:46,140
But if I do this, then the

25
00:00:46,150 --> 00:00:48,600
result is that V gets

26
00:00:48,610 --> 00:00:49,490
set to, you know, two to

27
00:00:49,500 --> 00:00:51,480
the power one, two to the power two, and so on.

28
00:00:51,490 --> 00:00:52,620
So this is syntax for I

29
00:00:52,630 --> 00:00:55,380
equals one colon 10 that

30
00:00:55,390 --> 00:00:57,430
makes I loop through the

31
00:00:57,440 --> 00:00:59,620
values one through 10.

32
00:00:59,630 --> 00:01:00,800
And by the way, you can also do

33
00:01:00,810 --> 00:01:02,460
this by setting your

34
00:01:02,470 --> 00:01:04,790
indices equals one to

35
00:01:04,800 --> 00:01:07,260
10, and so the

36
00:01:07,270 --> 00:01:09,240
indices in the array from one to 10.

37
00:01:09,250 --> 00:01:12,980
You can also write for I equals indices.

38
00:01:15,040 --> 00:01:17,810
And this is actually the same as if I equals one to 10.

39
00:01:17,820 --> 00:01:19,470
You can do, you know, display

40
00:01:19,480 --> 00:01:23,300
I and this would do the same thing.

41
00:01:23,310 --> 00:01:24,670
So, that is a "for" loop,

42
00:01:24,680 --> 00:01:27,220
if you are familiar with "break"

43
00:01:27,230 --> 00:01:29,330
and "continue", there's "break" and

44
00:01:29,340 --> 00:01:30,770
"continue" statements, you can

45
00:01:30,780 --> 00:01:31,970
also use those inside loops

46
00:01:31,980 --> 00:01:33,850
in octave, but first

47
00:01:33,860 --> 00:01:36,560
let me show you how a while loop works.

48
00:01:36,570 --> 00:01:39,110
So, here's my vector

49
00:01:39,120 --> 00:01:40,910
V. Let's write the while loop.

50
00:01:40,920 --> 00:01:44,000
I equals 1, while I

51
00:01:44,010 --> 00:01:45,230
is less than or equal to

52
00:01:45,240 --> 00:01:47,640
5, let's set

53
00:01:47,650 --> 00:01:51,320
V I equals one hundred

54
00:01:51,530 --> 00:01:54,400
and increment I by

55
00:01:54,410 --> 00:01:56,690
one, end.

56
00:01:56,700 --> 00:01:58,080
So this says what?

57
00:01:58,090 --> 00:01:59,960
I starts off equal to

58
00:01:59,970 --> 00:02:01,370
one and then I'm going

59
00:02:01,380 --> 00:02:02,600
to set V I equals one

60
00:02:02,610 --> 00:02:04,250
hundred and increment I by

61
00:02:04,260 --> 00:02:07,680
one until I is, you know, greater than five.

62
00:02:07,690 --> 00:02:09,340
And as a result of that,

63
00:02:09,350 --> 00:02:13,000
whereas previously V was this powers of two vector.

64
00:02:13,010 --> 00:02:14,570
I've now taken the first

65
00:02:14,580 --> 00:02:17,250
five elements of my vector

66
00:02:17,260 --> 00:02:19,600
and overwritten them with this value one hundred.

67
00:02:19,610 --> 00:02:22,620
So that's a syntax for a while loop.

68
00:02:23,140 --> 00:02:24,450
Let's do another example.

69
00:02:24,460 --> 00:02:26,540
Y equals one while

70
00:02:26,550 --> 00:02:28,490
true and here

71
00:02:28,500 --> 00:02:31,840
I wanted to show you how to use a break statement.

72
00:02:31,850 --> 00:02:34,060
Let's say V I equals 999

73
00:02:34,070 --> 00:02:37,400
and I equals i+1

74
00:02:38,110 --> 00:02:47,400
if i equals 6 break and

75
00:02:47,910 --> 00:02:48,060
end.

76
00:02:48,070 --> 00:02:49,150
And this is also our first

77
00:02:49,160 --> 00:02:51,880
use of an if statement, so

78
00:02:51,890 --> 00:02:53,290
I hope the logic of this makes sense.

79
00:02:53,300 --> 00:02:57,330
Since I equals one and, you know, increment loop.

80
00:02:57,340 --> 00:02:59,850
While repeatedly set V I equals 1

81
00:02:59,860 --> 00:03:01,420
and increment i by 1,

82
00:03:01,430 --> 00:03:02,910
and then when 1 i

83
00:03:02,920 --> 00:03:04,440
gets up to 6, do a

84
00:03:04,450 --> 00:03:05,680
break which breaks here although

85
00:03:05,690 --> 00:03:07,160
the while do and so, the

86
00:03:07,170 --> 00:03:08,560
effective is should be to take

87
00:03:08,570 --> 00:03:09,900
the first five elements of this

88
00:03:09,910 --> 00:03:11,730
vector V and set them to 999.

89
00:03:11,740 --> 00:03:14,810
And yes, indeed, we're taking

90
00:03:14,820 --> 00:03:18,320
V and overwritten the first five elements with 999.

91
00:03:18,330 --> 00:03:20,160
So, this is the

92
00:03:20,170 --> 00:03:21,950
syntax for "if" statements, and

93
00:03:21,960 --> 00:03:25,060
for "while" statement, and notice the end.

94
00:03:25,070 --> 00:03:27,160
We have two ends here.

95
00:03:27,170 --> 00:03:29,720
This ends here ends the if statement

96
00:03:29,730 --> 00:03:33,240
and the second end here ends the while statement.

97
00:03:33,250 --> 00:03:35,240
Now let me show you the more general syntax for

98
00:03:35,250 --> 00:03:37,740
how to use an if-else statement.

99
00:03:37,750 --> 00:03:40,230
So, let's see, V 1

100
00:03:40,240 --> 00:03:42,850
is equal to 999, let's

101
00:03:42,860 --> 00:03:46,850
type V1 equals to 2 for this example.

102
00:03:47,020 --> 00:03:48,730
So, let me type

103
00:03:48,740 --> 00:03:56,550
if V 1 equals 1 display the value as one.

104
00:03:57,470 --> 00:03:58,540
Here's how you write an else

105
00:03:58,550 --> 00:04:00,010
statement, or rather here's an

106
00:04:00,020 --> 00:04:03,810
else if: V 1 equals

107
00:04:03,820 --> 00:04:08,020
2. This is, if in case that's true in our example, display

108
00:04:08,030 --> 00:04:12,030
the value as 2, else

109
00:04:13,650 --> 00:04:17,980
display, the value is not one or two.

110
00:04:17,990 --> 00:04:21,690
Okay, so that's a  if-else

111
00:04:21,700 --> 00:04:23,870
if-else statement it ends.

112
00:04:23,880 --> 00:04:25,250
And of course, here we've just

113
00:04:25,260 --> 00:04:27,600
set v 1 equals 2, so hopefully, yup,

114
00:04:27,610 --> 00:04:30,460
displays that the value is 2.

115
00:04:30,780 --> 00:04:32,870
And finally, I don't

116
00:04:32,880 --> 00:04:34,130
think I talked about this earlier, but

117
00:04:34,140 --> 00:04:35,600
if you ever need to exit Octave,

118
00:04:35,610 --> 00:04:36,900
you can type the exit command and

119
00:04:36,910 --> 00:04:38,390
you hit enter that will cause Octave

120
00:04:38,400 --> 00:04:39,970
to quit or the 'q'--quits

121
00:04:39,980 --> 00:04:42,420
command also works.

122
00:04:42,450 --> 00:04:43,830
Finally, let's talk about

123
00:04:43,840 --> 00:04:45,300
functions and how to define

124
00:04:45,310 --> 00:04:48,200
them and how to use them.

125
00:04:48,620 --> 00:04:49,710
Here's my desktop, and I

126
00:04:49,720 --> 00:04:52,040
have predefined a file

127
00:04:52,050 --> 00:04:56,210
or pre-saved on my desktop a file called "squarethisnumber.m".

128
00:04:56,830 --> 00:04:59,470
This is how you define functions in Octave.

129
00:04:59,480 --> 00:05:01,590
You create a file called, you know,

130
00:05:01,600 --> 00:05:03,950
with your function name and then ending in .m,

131
00:05:03,960 --> 00:05:05,720
and when Octave finds

132
00:05:05,730 --> 00:05:07,670
this file, it knows that this

133
00:05:07,680 --> 00:05:11,760
where it should look for the definition of the function "squarethisnumber.m".

134
00:05:12,340 --> 00:05:13,990
Let's open up this file.

135
00:05:14,000 --> 00:05:15,700
Notice that I'm using the

136
00:05:15,710 --> 00:05:19,300
Microsoft program Wordpad to open up this file.

137
00:05:19,310 --> 00:05:20,180
I just want to encourage you, if

138
00:05:20,190 --> 00:05:23,340
your using Microsoft Windows, to

139
00:05:23,350 --> 00:05:25,100
use Wordpad rather than

140
00:05:25,110 --> 00:05:27,480
Notepad to open up these

141
00:05:27,490 --> 00:05:28,520
files, if you have a

142
00:05:28,530 --> 00:05:29,880
different text editor that's fine

143
00:05:29,890 --> 00:05:33,340
too, but notepad sometimes messes up the spacing.

144
00:05:33,350 --> 00:05:34,790
If you only have Notepad, that should

145
00:05:34,800 --> 00:05:36,240
work too, that could work

146
00:05:36,250 --> 00:05:37,690
too, but if you

147
00:05:37,700 --> 00:05:39,310
have Wordpad as well, I

148
00:05:39,320 --> 00:05:40,600
would rather use that or some

149
00:05:40,610 --> 00:05:44,430
other text editor, if you have a different text editor for editing your functions.

150
00:05:45,060 --> 00:05:47,130
So, here's how you define the function in Octave.

151
00:05:47,140 --> 00:05:49,750
Let me just zoom in a little bit.

152
00:05:49,760 --> 00:05:52,450
And this file has just three lines in it.

153
00:05:52,460 --> 00:05:54,410
The first line says function Y equals square root

154
00:05:54,420 --> 00:05:56,420
number of X, this tells

155
00:05:56,430 --> 00:05:57,690
Octave that I'm gonna return

156
00:05:57,700 --> 00:05:59,980
the value Y, I'm gonna

157
00:05:59,990 --> 00:06:01,230
return one value and that

158
00:06:01,240 --> 00:06:02,270
the value is going to

159
00:06:02,280 --> 00:06:04,370
be saved in the variable Y

160
00:06:04,380 --> 00:06:05,950
and moreover, it tells Octave

161
00:06:05,960 --> 00:06:08,060
that this function has one argument,

162
00:06:08,070 --> 00:06:10,410
which is the argument X,

163
00:06:10,420 --> 00:06:11,790
and the way the function

164
00:06:11,800 --> 00:06:15,170
body is defined, if Y equals X squared.

165
00:06:15,180 --> 00:06:16,500
So, let's try to call

166
00:06:16,510 --> 00:06:19,060
this function "square", this number

167
00:06:19,070 --> 00:06:21,840
5, and this actually

168
00:06:21,850 --> 00:06:23,040
isn't going to work, and

169
00:06:23,050 --> 00:06:25,670
Octave says square this number it's undefined.

170
00:06:25,680 --> 00:06:28,880
That's because Octave doesn't know where to find this file.

171
00:06:28,890 --> 00:06:30,680
So as usual, let's use PWD,

172
00:06:30,690 --> 00:06:32,550
or not in my directory,

173
00:06:32,560 --> 00:06:36,130
so let's see this c:\users\ang\desktop.

174
00:06:36,140 --> 00:06:38,680
That's where my desktop is.

175
00:06:39,880 --> 00:06:41,230
Oops, a little typo there.

176
00:06:41,240 --> 00:06:42,770
Users ANG desktop

177
00:06:42,780 --> 00:06:44,010
and if I now type square

178
00:06:44,020 --> 00:06:47,610
root number 5, it returns the

179
00:06:48,020 --> 00:06:48,370
answer 25.

180
00:06:48,380 --> 00:06:50,300
As kind of an advanced feature, this

181
00:06:50,310 --> 00:06:51,500
is only for those of you

182
00:06:51,510 --> 00:06:54,520
that know what the term search path means.

183
00:06:54,530 --> 00:06:55,840
But so if you

184
00:06:55,850 --> 00:06:57,350
want to modify the Octave

185
00:06:57,360 --> 00:06:58,810
search path and you

186
00:06:58,820 --> 00:06:59,730
could, you just think of

187
00:06:59,740 --> 00:07:01,760
this next part as advanced

188
00:07:01,770 --> 00:07:03,420
or optional material.

189
00:07:03,430 --> 00:07:04,170
Only for those who are either

190
00:07:04,180 --> 00:07:05,420
familiar with the concepts of

191
00:07:05,430 --> 00:07:07,640
search paths and permit languages,

192
00:07:07,650 --> 00:07:08,770
but you can use the

193
00:07:08,780 --> 00:07:11,870
term addpath, safety colon,

194
00:07:11,880 --> 00:07:16,210
slash users/ANG/desktop to

195
00:07:16,220 --> 00:07:17,940
add that directory to the

196
00:07:17,950 --> 00:07:19,690
Octave search path so that

197
00:07:19,700 --> 00:07:20,970
even if you know, go to

198
00:07:20,980 --> 00:07:22,600
some other directory I can

199
00:07:22,610 --> 00:07:24,460
still, Octave still knows

200
00:07:24,470 --> 00:07:25,910
to look in the users ANG

201
00:07:25,920 --> 00:07:29,450
desktop directory for functions

202
00:07:29,460 --> 00:07:30,390
so that even though I'm in

203
00:07:30,400 --> 00:07:31,750
a different directory now, it still

204
00:07:31,760 --> 00:07:35,130
knows where to find the square this number function.

205
00:07:35,140 --> 00:07:35,340
Okay?

206
00:07:35,350 --> 00:07:37,360
But if you're not familiar

207
00:07:37,370 --> 00:07:39,420
with the concept of search path, don't worry

208
00:07:39,430 --> 00:07:39,950
about it.

209
00:07:39,960 --> 00:07:40,800
Just make sure as you use

210
00:07:40,810 --> 00:07:42,030
the CD command to go to

211
00:07:42,040 --> 00:07:43,930
the directory of your function before

212
00:07:43,940 --> 00:07:46,910
you run it and that actually works just fine.

213
00:07:47,800 --> 00:07:49,590
One concept that Octave has

214
00:07:49,600 --> 00:07:50,950
that many other programming

215
00:07:50,960 --> 00:07:52,900
languages don't is that it

216
00:07:52,910 --> 00:07:54,880
can also let you define

217
00:07:54,890 --> 00:07:58,860
functions that return multiple values or multiple arguments.

218
00:07:58,870 --> 00:08:00,670
So here's an example of that.

219
00:08:00,680 --> 00:08:02,910
Define the function called square

220
00:08:02,920 --> 00:08:04,930
and cube this number X

221
00:08:04,940 --> 00:08:06,650
and what this says is this

222
00:08:06,660 --> 00:08:08,530
function returns 2 values, y1 and y2.

223
00:08:08,540 --> 00:08:09,950
When I set down, this

224
00:08:09,960 --> 00:08:13,580
follows, y1 is squared, y2 is execute.

225
00:08:13,590 --> 00:08:16,970
And what this does is this really returns 2 numbers.

226
00:08:16,980 --> 00:08:18,820
So, some of you depending

227
00:08:18,830 --> 00:08:20,140
on what programming language you use,

228
00:08:20,150 --> 00:08:22,930
if you're familiar with, you know, CC++ your offer.

229
00:08:22,940 --> 00:08:26,030
Often, we think of the function as return in just one value.

230
00:08:26,040 --> 00:08:27,820
But just so the syntax in Octave

231
00:08:27,830 --> 00:08:30,610
that should return multiple values.

232
00:08:32,430 --> 00:08:34,070
Now back in the Octave window. If

233
00:08:34,080 --> 00:08:37,890
I type, you know, a, b equals

234
00:08:37,900 --> 00:08:41,230
square and cube this

235
00:08:41,240 --> 00:08:44,600
number 5 then

236
00:08:44,610 --> 00:08:46,280
a is now equal to

237
00:08:46,290 --> 00:08:47,750
25 and b is equal to

238
00:08:47,760 --> 00:08:49,710
the cube of 5 equal to 125.

239
00:08:49,720 --> 00:08:51,660
So, this is often

240
00:08:51,670 --> 00:08:52,960
convenient if you needed to define

241
00:08:52,970 --> 00:08:56,390
a function that returns multiple values.

242
00:08:56,400 --> 00:08:57,370
Finally, I'm going to show

243
00:08:57,380 --> 00:09:01,120
you just one more sophisticated example of a function.

244
00:09:01,130 --> 00:09:02,360
Let's say I have a data set

245
00:09:02,370 --> 00:09:04,420
that looks like this, with data points at 1, 1, 2, 2, 3, 3.

246
00:09:04,430 --> 00:09:07,610
And what I'd like

247
00:09:07,620 --> 00:09:09,060
to do is to define an

248
00:09:09,070 --> 00:09:10,820
octave function to compute the cost

249
00:09:10,830 --> 00:09:14,350
function J of theta for different values of theta.

250
00:09:14,360 --> 00:09:16,150
First let's put the data into octave.

251
00:09:16,160 --> 00:09:17,690
So I set my design

252
00:09:17,700 --> 00:09:21,000
matrix to be 1,1,1,2,1,3.

253
00:09:21,010 --> 00:09:24,040
So, this is my design

254
00:09:24,050 --> 00:09:26,040
matrix x with x0, the

255
00:09:26,050 --> 00:09:27,410
first column being the said

256
00:09:27,420 --> 00:09:28,760
term and the second term being

257
00:09:28,770 --> 00:09:32,300
you know, my the x-values of my three training examples.

258
00:09:32,310 --> 00:09:33,550
And let me set

259
00:09:33,560 --> 00:09:35,440
y to be 1-2-3 as

260
00:09:35,450 --> 00:09:38,770
follows, which were the y axis values.

261
00:09:38,810 --> 00:09:40,390
So let's say theta

262
00:09:40,400 --> 00:09:43,720
is equal to 0 semicolon 1.

263
00:09:43,730 --> 00:09:45,650
Here at my desktop, I've

264
00:09:45,660 --> 00:09:47,480
predefined does cost function

265
00:09:47,490 --> 00:09:49,000
j and if I

266
00:09:49,010 --> 00:09:52,000
bring up the definition of that function it looks as follows.

267
00:09:52,010 --> 00:09:53,570
So function j equals cost function

268
00:09:53,580 --> 00:09:55,180
j equals x y

269
00:09:55,190 --> 00:09:57,080
theta, some commons, specifying

270
00:09:57,090 --> 00:09:59,550
the inputs and then

271
00:09:59,560 --> 00:10:01,340
vary few steps set m

272
00:10:01,350 --> 00:10:03,010
to be the number trading examples

273
00:10:03,020 --> 00:10:05,500
thus the number of rows in x.

274
00:10:05,510 --> 00:10:07,550
Compute the predictions, predictions equals

275
00:10:07,560 --> 00:10:10,160
x times theta and so

276
00:10:10,170 --> 00:10:11,700
this is a common that's wrapped

277
00:10:11,710 --> 00:10:14,710
around, so this is probably the preceding comment line.

278
00:10:14,720 --> 00:10:16,780
Computer script errors by, you know, taking

279
00:10:16,790 --> 00:10:18,630
the difference between your predictions and

280
00:10:18,640 --> 00:10:20,230
the y values and taking the

281
00:10:20,240 --> 00:10:22,130
element of y squaring and then

282
00:10:22,140 --> 00:10:24,350
finally computing the cost

283
00:10:24,360 --> 00:10:26,100
function J. And Octave knows

284
00:10:26,110 --> 00:10:27,380
that J is a value I

285
00:10:27,390 --> 00:10:31,410
want to return because J appeared here in the function definition.

286
00:10:31,420 --> 00:10:34,160
Feel free by the way to pause

287
00:10:34,170 --> 00:10:35,260
this video if you want

288
00:10:35,270 --> 00:10:36,620
to look at this function

289
00:10:36,630 --> 00:10:38,790
definition for longer and

290
00:10:38,800 --> 00:10:43,900
kind of make sure that you understand the different steps.

291
00:10:44,030 --> 00:10:45,140
But when I run it in

292
00:10:45,150 --> 00:10:46,580
Octave, I run j equals

293
00:10:46,590 --> 00:10:51,180
cost function j x y theta.

294
00:10:51,190 --> 00:10:55,100
It computes. Oops, made a typo there.

295
00:10:55,110 --> 00:10:56,980
It should have been capital X. It

296
00:10:56,990 --> 00:11:00,500
computes J equals 0 because

297
00:11:00,510 --> 00:11:04,480
if my data set was,

298
00:11:04,490 --> 00:11:06,970
you know, 123, 123 then setting, theta 0

299
00:11:06,980 --> 00:11:08,760
equals 0, theta 1 equals

300
00:11:08,770 --> 00:11:10,850
1, this gives me exactly the

301
00:11:10,860 --> 00:11:14,490
45-degree line that fits my data set perfectly.

302
00:11:15,600 --> 00:11:16,820
Whereas in contrast if I set

303
00:11:16,830 --> 00:11:19,820
theta equals say 0, 0,

304
00:11:19,830 --> 00:11:22,530
then this hypothesis is

305
00:11:22,540 --> 00:11:24,020
predicting zeroes on everything

306
00:11:24,030 --> 00:11:25,800
the same, theta 0 equals 0,

307
00:11:25,810 --> 00:11:27,070
theta 1 equals 0 and

308
00:11:27,080 --> 00:11:29,360
I compute the cost function

309
00:11:29,370 --> 00:11:31,790
then it's 2.333 and that's

310
00:11:31,800 --> 00:11:34,610
actually equal to 1 squared,

311
00:11:35,520 --> 00:11:36,730
which is my squared error on

312
00:11:36,740 --> 00:11:39,790
the first example, plus 2 squared,

313
00:11:39,800 --> 00:11:42,430
plus 3 squared and then

314
00:11:42,440 --> 00:11:45,240
divided by 2m, which is

315
00:11:45,250 --> 00:11:47,050
2 times number of training examples,

316
00:11:47,060 --> 00:11:50,220
which is indeed 2.33 and

317
00:11:50,640 --> 00:11:53,320
so, that sanity checks that

318
00:11:53,330 --> 00:11:54,870
this function here is, you

319
00:11:54,880 --> 00:11:56,260
know, computing the correct cost

320
00:11:56,270 --> 00:11:58,240
function and these are the couple examples

321
00:11:58,250 --> 00:12:00,160
we tried out on our

322
00:12:00,170 --> 00:12:02,810
simple training example.

323
00:12:03,490 --> 00:12:04,950
And so that sanity tracks

324
00:12:04,960 --> 00:12:08,620
that the cost function J,

325
00:12:08,720 --> 00:12:10,220
as defined here, that it

326
00:12:10,230 --> 00:12:12,940
is indeed, you know, seeming to compute

327
00:12:12,950 --> 00:12:14,910
the correct cost function, at least

328
00:12:14,920 --> 00:12:17,420
on our simple training set

329
00:12:17,430 --> 00:12:18,780
that we had here with X

330
00:12:18,790 --> 00:12:20,780
and Y being this

331
00:12:20,790 --> 00:12:23,920
simple training example that we solved.

332
00:12:25,230 --> 00:12:26,200
So, now you know how

333
00:12:26,210 --> 00:12:28,150
to right control statements like for loops,

334
00:12:28,160 --> 00:12:29,770
while loops and if statements

335
00:12:29,780 --> 00:12:33,170
in octave as well as how to define and use functions.

336
00:12:33,180 --> 00:12:34,420
In the next video, I'm

337
00:12:34,430 --> 00:12:36,060
going to just very quickly

338
00:12:36,070 --> 00:12:38,100
step you through the logistics

339
00:12:38,110 --> 00:12:39,790
of working on and

340
00:12:39,800 --> 00:12:41,630
submitting problem sets for

341
00:12:41,640 --> 00:12:45,220
this class and how to use our submission system.

342
00:12:45,230 --> 00:12:46,770
And finally, after that, in

343
00:12:46,780 --> 00:12:48,790
the final octave tutorial video,

344
00:12:48,800 --> 00:12:51,360
I wanna tell you about vectorization, which

345
00:12:51,370 --> 00:12:52,870
is an idea for how to

346
00:12:52,880 --> 00:12:56,380
make your octave programs run much fast.

