1
00:00:00,090 --> 00:00:02,380
You now know a bunch about machine learning.

2
00:00:02,390 --> 00:00:03,550
In this video, I like to

3
00:00:03,560 --> 00:00:05,460
teach you a programing language,

4
00:00:05,470 --> 00:00:06,750
Octave, in which you'll be

5
00:00:06,760 --> 00:00:08,880
able to very quickly implement

6
00:00:08,890 --> 00:00:10,190
the the learning algorithms we've

7
00:00:10,200 --> 00:00:11,760
seen already, and the learning

8
00:00:11,770 --> 00:00:14,890
algorithms we'll see later in this course.

9
00:00:14,900 --> 00:00:16,310
In the past, I've tried to teach machine learning

10
00:00:16,320 --> 00:00:19,490
using a large variety of different programming languages

11
00:00:19,500 --> 00:00:22,300
including C++ Java,

12
00:00:23,410 --> 00:00:25,520
Python, NumPy, and also

13
00:00:25,530 --> 00:00:27,150
Octave, and what I

14
00:00:27,160 --> 00:00:28,780
found was that students were able

15
00:00:28,790 --> 00:00:30,560
to learn the most

16
00:00:30,570 --> 00:00:32,440
productively learn the most quickly

17
00:00:32,450 --> 00:00:33,760
and prototype your algorithms most

18
00:00:33,770 --> 00:00:35,550
quickly using a relatively

19
00:00:35,560 --> 00:00:38,270
high level language like octave.

20
00:00:38,290 --> 00:00:39,780
In fact, what I often

21
00:00:39,790 --> 00:00:41,510
see in Silicon Valley is

22
00:00:41,520 --> 00:00:43,630
that if even if you need to build.

23
00:00:43,640 --> 00:00:44,730
If you want to build a large

24
00:00:44,740 --> 00:00:46,600
scale deployment of a learning

25
00:00:46,610 --> 00:00:48,230
algorithm, what people will often do

26
00:00:48,240 --> 00:00:50,650
is prototype and the language is Octave.

27
00:00:50,660 --> 00:00:52,200
Which is a great prototyping language.

28
00:00:52,210 --> 00:00:55,260
So you can sort of get your learning algorithms working quickly.

29
00:00:55,270 --> 00:00:56,600
And then only if you need

30
00:00:56,610 --> 00:00:58,470
to a very large scale deployment of it.

31
00:00:58,480 --> 00:01:00,350
Only then spend your time

32
00:01:00,360 --> 00:01:03,010
re-implementing the algorithm

33
00:01:03,020 --> 00:01:05,150
to C++ Java or some of the language like that.

34
00:01:05,160 --> 00:01:06,290
Because all the lessons we've learned is

35
00:01:06,300 --> 00:01:08,770
that a time or develop a time.

36
00:01:08,780 --> 00:01:09,860
That is your time.

37
00:01:09,870 --> 00:01:13,310
The machine learning's time is incredibly valuable.

38
00:01:13,320 --> 00:01:15,090
And if you can

39
00:01:15,100 --> 00:01:17,840
get your learning algorithms to work more quickly in Octave.

40
00:01:17,850 --> 00:01:18,880
Then overall you have a

41
00:01:18,890 --> 00:01:20,710
huge time savings by first

42
00:01:20,720 --> 00:01:22,140
developing the algorithms in

43
00:01:22,150 --> 00:01:23,940
Octave, and then implementing and

44
00:01:23,950 --> 00:01:28,150
maybe C++ Java, only after we have the ideas working.

45
00:01:28,160 --> 00:01:30,220
The most common prototyping language I

46
00:01:30,230 --> 00:01:31,550
see people use for machine

47
00:01:31,560 --> 00:01:34,060
learning are: Octave, MATLAB,

48
00:01:34,070 --> 00:01:38,140
Python, NumPy, and R.

49
00:01:38,150 --> 00:01:40,010
Octave is nice because open sourced.

50
00:01:40,020 --> 00:01:42,660
And MATLAB works well

51
00:01:42,670 --> 00:01:44,800
too, but it is expensive for

52
00:01:44,810 --> 00:01:45,950
to many people.

53
00:01:45,960 --> 00:01:47,900
But if you have access to a copy of MATLAB.

54
00:01:47,910 --> 00:01:50,100
You can also use MATLAB with this class.

55
00:01:50,110 --> 00:01:52,010
If you know Python, NumPy,

56
00:01:52,020 --> 00:01:54,860
or if you know R. I do see some people use it.

57
00:01:54,870 --> 00:01:56,350
But, what I see is

58
00:01:56,360 --> 00:01:57,750
that people usually end up

59
00:01:57,760 --> 00:02:00,040
developing somewhat more slowly, and

60
00:02:00,050 --> 00:02:02,100
you know, these languages.

61
00:02:02,110 --> 00:02:04,000
Because the Python, NumPy syntax

62
00:02:04,010 --> 00:02:08,400
is just slightly clunkier than the Octave syntax.

63
00:02:08,410 --> 00:02:09,690
And so because of that, and

64
00:02:09,700 --> 00:02:11,370
because we are releasing starter

65
00:02:11,380 --> 00:02:13,020
code in Octave.

66
00:02:13,030 --> 00:02:14,350
I strongly recommend that you

67
00:02:14,360 --> 00:02:17,590
not try to do the following exercises in this class in NumPy and R.

68
00:02:18,330 --> 00:02:19,780
But that I do recommend that

69
00:02:19,790 --> 00:02:21,510
you instead do the programming exercises

70
00:02:21,520 --> 00:02:24,300
for this class in octave instead.

71
00:02:24,330 --> 00:02:25,390
What I'm going to do in

72
00:02:25,400 --> 00:02:26,660
this video is go through

73
00:02:26,670 --> 00:02:28,650
a list of commands very,

74
00:02:28,660 --> 00:02:29,860
very quickly, and its goal

75
00:02:29,870 --> 00:02:31,070
is to quickly show you the

76
00:02:31,080 --> 00:02:34,780
range of commands and the range of things you can do in Octave.

77
00:02:34,790 --> 00:02:36,510
The course website will have

78
00:02:36,520 --> 00:02:38,930
a transcript of everything I

79
00:02:38,940 --> 00:02:42,070
do, and so after

80
00:02:42,080 --> 00:02:43,150
watching this video you

81
00:02:43,160 --> 00:02:44,880
can refer to the transcript

82
00:02:44,890 --> 00:02:46,620
posted on the course website

83
00:02:46,630 --> 00:02:48,210
when you want find a command.

84
00:02:48,220 --> 00:02:50,160
Concretely, what I recommend

85
00:02:50,170 --> 00:02:53,220
you do is first watch the tutorial videos.

86
00:02:53,230 --> 00:02:55,110
And after watching to the

87
00:02:55,120 --> 00:02:58,710
end, then install Octave on your computer.

88
00:02:58,720 --> 00:02:59,670
And finally, it goes to

89
00:02:59,680 --> 00:03:01,760
the course website, download the transcripts

90
00:03:01,770 --> 00:03:02,960
of the things you see in the

91
00:03:02,970 --> 00:03:04,920
session, and type in

92
00:03:04,930 --> 00:03:07,190
whatever commands seem interesting

93
00:03:07,200 --> 00:03:09,100
to you into Octave, so that it's

94
00:03:09,110 --> 00:03:10,590
running on your own computer, so

95
00:03:10,600 --> 00:03:12,960
you can see it run for yourself.

96
00:03:12,970 --> 00:03:15,620
And with that let's get started.

97
00:03:15,920 --> 00:03:19,360
Here's my Windows desktop, and I'm going to start up Octave.

98
00:03:19,370 --> 00:03:20,960
And I'm now in Octave.

99
00:03:20,970 --> 00:03:22,480
And that's my Octave prompt.

100
00:03:22,490 --> 00:03:24,450
Let me first show the elementary

101
00:03:24,460 --> 00:03:27,320
operations you can do in Octave.

102
00:03:27,330 --> 00:03:28,460
So you type in 5 + 6.

103
00:03:28,470 --> 00:03:30,650
That gives you the answer of 11.

104
00:03:30,660 --> 00:03:31,530
3 - 2.

105
00:03:31,540 --> 00:03:33,690
5 x 8, 1/2, 2^6

106
00:03:33,700 --> 00:03:35,800


107
00:03:35,810 --> 00:03:37,800
is 64.

108
00:03:37,810 --> 00:03:42,380
So those are the elementary math operations.

109
00:03:42,390 --> 00:03:44,540
You can also do logical operations.

110
00:03:44,550 --> 00:03:45,900
So one equals two.

111
00:03:45,910 --> 00:03:47,710
This evaluates to false.

112
00:03:47,720 --> 00:03:51,630
The percent command here means a comment.

113
00:03:51,640 --> 00:03:53,850
So, one equals two, evaluates to false.

114
00:03:53,860 --> 00:03:55,640
Which is represents by zero.

115
00:03:55,650 --> 00:03:58,530
One not equals to two.

116
00:03:58,540 --> 00:03:59,070
This is true.

117
00:03:59,080 --> 00:04:00,610
So that returns one.

118
00:04:00,620 --> 00:04:02,110
Note that a not equal sign

119
00:04:02,120 --> 00:04:05,540
is this tilde equals symbol.

120
00:04:05,550 --> 00:04:07,200
And not bang equals.

121
00:04:07,210 --> 00:04:10,120
Which is what some other

122
00:04:10,190 --> 00:04:10,900
programming languages use.

123
00:04:10,910 --> 00:04:13,510
Lets see large operations one and zero

124
00:04:13,520 --> 00:04:15,490
use a double ampersand sign to

125
00:04:15,500 --> 00:04:18,110
the logical AND.

126
00:04:18,120 --> 00:04:20,130
And that evaluates false.

127
00:04:20,140 --> 00:04:23,890
One or zero is the OR operation.

128
00:04:23,900 --> 00:04:25,720
And that evaluates to true.

129
00:04:25,730 --> 00:04:27,060
And I can XOR one and

130
00:04:27,070 --> 00:04:30,260
zero, and that evaluates to one.

131
00:04:30,270 --> 00:04:32,870
This thing over on the left, this Octave 324.x

132
00:04:32,880 --> 00:04:35,690
equals 11, this is the default Octave prompt.

133
00:04:35,700 --> 00:04:37,510
It shows the, what, the

134
00:04:37,520 --> 00:04:39,120
version in Octave and so on.

135
00:04:39,130 --> 00:04:40,440
If you don't want that prompt,

136
00:04:40,450 --> 00:04:42,970
there's a somewhat cryptic command PF

137
00:04:42,980 --> 00:04:44,650
quote, greater than, greater

138
00:04:44,660 --> 00:04:46,590
than and so on,

139
00:04:46,600 --> 00:04:48,800
that you can use to change the prompt.

140
00:04:48,810 --> 00:04:51,260
And I guess this quote a string in the middle.

141
00:04:51,270 --> 00:04:53,390
Your quote, greater than, greater than, space.

142
00:04:53,400 --> 00:04:55,920
That's what I prefer my Octave prompt to look like.

143
00:04:55,930 --> 00:04:57,810
So if I hit enter.

144
00:04:57,920 --> 00:05:00,050
Oops, excuse me.

145
00:05:00,350 --> 00:05:00,710
Like so.

146
00:05:00,720 --> 00:05:02,590
PS1 like so.

147
00:05:02,600 --> 00:05:05,490
Now my Octave prompt has changed to the greater than, greater than sign.Which,

148
00:05:05,500 --> 00:05:09,040
you know, looks quite a bit better.

149
00:05:09,710 --> 00:05:12,370
Next let's talk about Octave variables.

150
00:05:12,380 --> 00:05:13,850
I can take the variable

151
00:05:13,860 --> 00:05:16,130
A and assign it to 3.

152
00:05:16,140 --> 00:05:18,430
And hit enter.

153
00:05:18,440 --> 00:05:20,060
And now A is equal to 3.

154
00:05:20,070 --> 00:05:22,850
You want to assign a variable, but you don't want to print out the result.

155
00:05:22,860 --> 00:05:26,750
If you put a semicolon, the semicolon

156
00:05:26,920 --> 00:05:30,790
suppresses the print output.

157
00:05:30,800 --> 00:05:33,120
So to do that, enter, it doesn't print anything.

158
00:05:33,130 --> 00:05:35,410
Whereas A equals 3.

159
00:05:35,420 --> 00:05:36,680
mix it, print it out,

160
00:05:36,690 --> 00:05:39,840
where A equals, 3 semicolon doesn't print anything.

161
00:05:39,850 --> 00:05:41,480
I can do string assignment.

162
00:05:41,490 --> 00:05:43,450
B equals high.

163
00:05:43,520 --> 00:05:45,020
Now if I just

164
00:05:45,030 --> 00:05:46,030
enter B it prints out the

165
00:05:46,040 --> 00:05:48,360
variable B. So B is the string high.

166
00:05:48,370 --> 00:05:51,120
C equals 3 greater than colon 1.

167
00:05:51,130 --> 00:05:55,530
So, now C evaluates the true.

168
00:05:55,710 --> 00:05:58,020
If you want to print

169
00:05:58,030 --> 00:06:00,790
out or display a variable, here's how you go about it.

170
00:06:00,800 --> 00:06:03,610
Let me set A equals Pi.

171
00:06:03,760 --> 00:06:04,950
And if I want to print

172
00:06:04,960 --> 00:06:08,510
A I can just type A like so, and it will print it out.

173
00:06:08,520 --> 00:06:10,320
For more complex printing there is

174
00:06:10,330 --> 00:06:13,700
also the DISP command which stands for Display.

175
00:06:13,710 --> 00:06:15,880
Display A just prints out A like so.

176
00:06:15,890 --> 00:06:18,340
You can also display strings

177
00:06:18,350 --> 00:06:21,450
so: DISP, sprintf, two

178
00:06:21,460 --> 00:06:25,250
decimals, percent 0.2,

179
00:06:25,260 --> 00:06:28,240
F, comma, A. Like so.

180
00:06:28,250 --> 00:06:29,860
And this will print out the string.

181
00:06:29,870 --> 00:06:31,670
Two decimals, colon, 3.14.

182
00:06:31,680 --> 00:06:33,660
This is kind of

183
00:06:33,670 --> 00:06:35,980
an old style C syntax.

184
00:06:35,990 --> 00:06:37,410
For those of you that

185
00:06:37,420 --> 00:06:39,060
have programmed C before, this is

186
00:06:39,070 --> 00:06:41,370
essentially the syntax you use to print screen.

187
00:06:41,380 --> 00:06:44,500
So the Sprintf generates a

188
00:06:44,510 --> 00:06:45,960
string that is less

189
00:06:45,970 --> 00:06:48,280
than the 2 decimals, 3.1 plus string.

190
00:06:48,290 --> 00:06:50,620
This percent 0.2 F means

191
00:06:50,630 --> 00:06:52,370
substitute A into here,

192
00:06:52,380 --> 00:06:55,900
showing the two digits after the decimal points.

193
00:06:55,910 --> 00:06:58,120
And DISP takes the string

194
00:06:58,130 --> 00:07:00,370
DISP generates it by the Sprintf command.

195
00:07:00,380 --> 00:07:01,880
Sprintf.

196
00:07:01,960 --> 00:07:03,010
The Sprintf command.

197
00:07:03,020 --> 00:07:05,860
And DISP actually displays the string.

198
00:07:05,870 --> 00:07:07,000
And to show you another

199
00:07:07,010 --> 00:07:11,920
example, Sprintf six decimals

200
00:07:11,930 --> 00:07:14,920
percent 0.6 F comma A.

201
00:07:14,930 --> 00:07:17,080
And, this should print Pi

202
00:07:17,090 --> 00:07:21,400
with six decimal places.

203
00:07:22,060 --> 00:07:25,730
Finally, I was saying, a like so, looks like this. There

204
00:07:25,740 --> 00:07:28,620
are useful shortcuts that type type formats long.

205
00:07:28,630 --> 00:07:31,750
It causes strings by default.

206
00:07:31,760 --> 00:07:33,710
Be displayed to a lot more decimal places.

207
00:07:33,720 --> 00:07:35,520
And format short is a

208
00:07:35,530 --> 00:07:37,110
command that restores the default

209
00:07:37,120 --> 00:07:40,490
of just printing a small number of digits.

210
00:07:40,600 --> 00:07:43,860
Okay, that's how you work with variables.

211
00:07:43,870 --> 00:07:47,060
Now let's look at vectors and matrices.

212
00:07:47,070 --> 00:07:49,270
Let's say I want to assign MAT A to the matrix.

213
00:07:49,280 --> 00:07:50,970
Let me show you an example: 1, 2,

214
00:07:50,980 --> 00:07:54,590
semicolon, 3, 4, semicolon, 5, 6.

215
00:07:54,600 --> 00:07:56,230
This generates a three by

216
00:07:56,240 --> 00:07:58,570
two matrix A whose first

217
00:07:58,580 --> 00:07:59,810
row is 1, 2. Second row

218
00:07:59,820 --> 00:08:01,990
3, 4. Third row is 5, 6.

219
00:08:02,000 --> 00:08:04,380
What the semicolon does is

220
00:08:04,390 --> 00:08:05,810
essentially say, go to

221
00:08:05,820 --> 00:08:07,830
the next row of the matrix.

222
00:08:07,840 --> 00:08:08,880
There are other ways to type this in.

223
00:08:08,890 --> 00:08:11,490
Type A 1, 2 semicolon

224
00:08:11,500 --> 00:08:15,030
3, 4, semicolon, 5, 6, like so.

225
00:08:15,040 --> 00:08:17,020
And that's another equivalent way of

226
00:08:17,030 --> 00:08:18,540
assigning A to be

227
00:08:18,550 --> 00:08:22,190
the values of this three by two matrix.

228
00:08:22,200 --> 00:08:23,450
Similarly you can assign vectors.

229
00:08:23,460 --> 00:08:25,550
So V equals 1, 2, 3.

230
00:08:25,560 --> 00:08:27,340
This is actually a row vector.

231
00:08:27,350 --> 00:08:29,930
Or this is a 3 by 1 vector.

232
00:08:29,940 --> 00:08:32,020
Where that is a fat Y vector,

233
00:08:32,030 --> 00:08:34,370
excuse me, not, this is

234
00:08:34,380 --> 00:08:37,950
a 1 by 3 matrix, right.

235
00:08:37,960 --> 00:08:39,240
Nothing by 1.

236
00:08:39,250 --> 00:08:40,990
If I want to assign

237
00:08:41,000 --> 00:08:43,960
this to a column vector,

238
00:08:43,970 --> 00:08:48,820
what I would do instead is do v 1;2;3.

239
00:08:48,830 --> 00:08:50,090
And this will give me a 3 by 1.

240
00:08:50,100 --> 00:08:51,640
There's a 1 by 3 vector.

241
00:08:51,650 --> 00:08:55,700
So this will be a column vector.

242
00:08:56,250 --> 00:08:57,950
Here's some more useful notation.

243
00:08:57,960 --> 00:09:02,270
V equals 1: 0.1: 2.

244
00:09:02,280 --> 00:09:03,610
What this does is

245
00:09:03,620 --> 00:09:05,690
it sets V to the bunch

246
00:09:05,700 --> 00:09:08,700
of elements that start from 1.

247
00:09:08,710 --> 00:09:10,400
And increments and steps

248
00:09:10,410 --> 00:09:13,650
of 0.1 until you get up to 2.

249
00:09:13,660 --> 00:09:18,960
So if I do this, V is going to be this, you know, row vector.

250
00:09:19,140 --> 00:09:22,980
This is what one by eleven matrix really.

251
00:09:22,990 --> 00:09:23,600
That's 1, 1.1, 1.2, 1.3 and

252
00:09:23,610 --> 00:09:27,590
so on until we

253
00:09:27,630 --> 00:09:30,210
get up to two.

254
00:09:31,440 --> 00:09:33,220
Now, and I can also

255
00:09:33,230 --> 00:09:35,050
set V equals one colon six,

256
00:09:35,060 --> 00:09:38,180
and that sets V to be these numbers.

257
00:09:38,190 --> 00:09:41,160
1 through 6, okay.

258
00:09:41,620 --> 00:09:44,220
Now here are some other ways to generate matrices.

259
00:09:44,230 --> 00:09:47,290
Ones 2.3 is a command

260
00:09:47,300 --> 00:09:49,130
that generates a matrix that

261
00:09:49,140 --> 00:09:50,760
is a two by three matrix

262
00:09:50,770 --> 00:09:52,690
that is the matrix of all ones.

263
00:09:52,700 --> 00:09:53,990
So if I set that c2

264
00:09:54,000 --> 00:09:56,820
times ones two by

265
00:09:56,830 --> 00:09:59,760
three this generates a

266
00:09:59,770 --> 00:10:03,070
two by three matrix that is all two's.

267
00:10:03,080 --> 00:10:04,220
You can think of this as a

268
00:10:04,230 --> 00:10:05,540
shorter way of writing this and

269
00:10:05,550 --> 00:10:06,880
c2,2,2's and you can

270
00:10:06,890 --> 00:10:11,220
call them 2,2,2, which would also give you the same result.

271
00:10:11,450 --> 00:10:13,910
Let's say W equals one's, one

272
00:10:13,920 --> 00:10:15,450
by three, so this is

273
00:10:15,460 --> 00:10:17,930
going to be a row vector

274
00:10:17,940 --> 00:10:20,980
or a row of

275
00:10:20,990 --> 00:10:23,840
three one's and similarly

276
00:10:23,850 --> 00:10:25,450
you can also say w equals

277
00:10:25,460 --> 00:10:27,440
zeroes, one by

278
00:10:27,450 --> 00:10:30,210
three, and this generates a matrix.

279
00:10:30,220 --> 00:10:34,720
A one by three matrix of all zeros.

280
00:10:34,730 --> 00:10:36,920
Just a couple more ways to generate matrices .

281
00:10:36,930 --> 00:10:39,100
If I do W equals

282
00:10:39,110 --> 00:10:41,510
Rand one by three,

283
00:10:41,520 --> 00:10:43,010
this gives me a one

284
00:10:43,020 --> 00:10:45,900
by three matrix of all random numbers.

285
00:10:45,910 --> 00:10:47,850
If I do Rand

286
00:10:48,200 --> 00:10:49,040
three by three.

287
00:10:49,050 --> 00:10:50,310
This gives me a three by

288
00:10:50,320 --> 00:10:51,920
three matrix of all

289
00:10:51,930 --> 00:10:53,990
random numbers drawn from the

290
00:10:54,000 --> 00:10:55,810
uniform distribution between zero and one.

291
00:10:55,820 --> 00:10:56,880
So every time I do

292
00:10:56,890 --> 00:10:58,550
this, I get a different

293
00:10:58,560 --> 00:11:00,530
set of random numbers drawn

294
00:11:00,540 --> 00:11:02,560
uniformly between zero and one.

295
00:11:02,570 --> 00:11:03,700
For those of you that

296
00:11:03,710 --> 00:11:05,400
know what a Gaussian random variable

297
00:11:05,410 --> 00:11:06,230
is or for those of you that

298
00:11:06,240 --> 00:11:07,650
know what a normal random variable

299
00:11:07,660 --> 00:11:09,100
is, you can also set W

300
00:11:09,110 --> 00:11:11,980
equals Rand N, one by three.

301
00:11:11,990 --> 00:11:13,560
And so these are going

302
00:11:13,570 --> 00:11:15,420
to be three values drawn from

303
00:11:15,430 --> 00:11:17,730
a Gaussian distribution with mean

304
00:11:17,740 --> 00:11:19,240
zero and variance or

305
00:11:19,250 --> 00:11:21,610
standard deviation equal to one.

306
00:11:21,620 --> 00:11:23,140
And you can set more complex

307
00:11:23,150 --> 00:11:24,640
things like W equals minus

308
00:11:24,650 --> 00:11:26,200
six, plus the square root

309
00:11:26,210 --> 00:11:28,650
ten, times, lets say

310
00:11:28,660 --> 00:11:31,870
Rand N, one by ten thousand.

311
00:11:31,880 --> 00:11:33,040
And I'm going to put a semicolon at

312
00:11:33,050 --> 00:11:35,590
the end because I don't really want this printed out.

313
00:11:35,600 --> 00:11:37,550
This is going to be a what?

314
00:11:37,560 --> 00:11:38,900
Well, it's going to

315
00:11:38,910 --> 00:11:40,600
be a vector of, with

316
00:11:40,610 --> 00:11:44,480
a hundred thousand, excuse me, ten thousand elements.

317
00:11:44,490 --> 00:11:47,580
So, well, actually, you know what?

318
00:11:47,590 --> 00:11:48,250
Let's print it out.

319
00:11:48,260 --> 00:11:51,670
So this will generate a matrix like this.

320
00:11:51,800 --> 00:11:51,950
Right?

321
00:11:51,960 --> 00:11:53,950
With 10,000 elements.

322
00:11:53,960 --> 00:11:55,760
So that's what W is.

323
00:11:55,770 --> 00:11:57,370
And if I now

324
00:11:57,380 --> 00:11:59,400
plot a histogram of W

325
00:11:59,410 --> 00:12:01,810
with a hist command, I can

326
00:12:01,820 --> 00:12:04,730
now. And Octave's print hist

327
00:12:04,740 --> 00:12:06,080
command, you know, takes a

328
00:12:06,090 --> 00:12:07,190
couple seconds to bring this up,

329
00:12:07,200 --> 00:12:08,960
but this is a histogram of

330
00:12:08,970 --> 00:12:10,640
my random variable for W.

331
00:12:10,650 --> 00:12:12,660
There was minus 6 plus zero

332
00:12:12,670 --> 00:12:15,510
ten times this Gaussian random variable.

333
00:12:15,520 --> 00:12:17,550
And I can plot a histogram with

334
00:12:17,560 --> 00:12:20,970
more buckets, with more bins, with say, 50 bins.

335
00:12:20,980 --> 00:12:22,510
And this is my

336
00:12:22,520 --> 00:12:25,680
histogram of a Gaussian with mean minus 6.

337
00:12:25,690 --> 00:12:27,220
Because I have a minus

338
00:12:27,230 --> 00:12:29,220
6 there plus square root 10 times this.

339
00:12:29,230 --> 00:12:32,930
So the variance of

340
00:12:32,940 --> 00:12:34,930
this Gaussian random variable

341
00:12:34,940 --> 00:12:36,690
is 10 on the standard deviation is

342
00:12:36,700 --> 00:12:38,940
square root of 10, which is about what?

343
00:12:38,950 --> 00:12:41,040
Three point one.

344
00:12:41,780 --> 00:12:43,800
Finally, one special command

345
00:12:43,810 --> 00:12:46,190
for generator matrix, which is the I command.

346
00:12:46,200 --> 00:12:48,320
So I stands for this

347
00:12:48,330 --> 00:12:51,040
is maybe a pun on the word identity.

348
00:12:51,050 --> 00:12:52,710
It's server set eye 4.

349
00:12:52,720 --> 00:12:55,980
This is the 4 by 4 identity matrix.

350
00:12:55,990 --> 00:12:57,660
So I equals eye 4.

351
00:12:57,670 --> 00:13:00,440
This gives me a 4 by 4 identity matrix.

352
00:13:00,450 --> 00:13:04,420
And I equals eye 5,  eye 6.

353
00:13:04,430 --> 00:13:05,580
That gives me a 6 by

354
00:13:05,590 --> 00:13:08,110
6 identity matrix, i3

355
00:13:08,120 --> 00:13:09,110
is the 3 by 3 identity matrix.

356
00:13:09,120 --> 00:13:12,000
Lastly, to

357
00:13:12,010 --> 00:13:14,270
wrap up this video, there's one more useful command.

358
00:13:14,280 --> 00:13:15,320
Which is the help command.

359
00:13:15,330 --> 00:13:17,420
So you can type help i and

360
00:13:17,430 --> 00:13:21,180
this brings up the help function for the identity matrix.

361
00:13:21,190 --> 00:13:22,750
Hit Q to quit.

362
00:13:22,760 --> 00:13:25,370
And you can also type help rand.

363
00:13:25,380 --> 00:13:27,760
Brings up documentation for the rand or the

364
00:13:27,770 --> 00:13:29,700
random number generation function.

365
00:13:29,710 --> 00:13:31,890
Or even help help, which

366
00:13:31,900 --> 00:13:35,330
shows you, you know help on the help function.

367
00:13:37,070 --> 00:13:38,940
So, those are the

368
00:13:38,950 --> 00:13:41,570
basic operations in Octave.

369
00:13:41,580 --> 00:13:42,600
And with this you should be

370
00:13:42,610 --> 00:13:47,000
able to generate a few matrices, multiply, add things.

371
00:13:47,120 --> 00:13:50,550
And use the basic operations in Octave.

372
00:13:50,560 --> 00:13:51,910
In the next video, I'd like

373
00:13:51,920 --> 00:13:53,790
to start talking about more

374
00:13:53,800 --> 00:13:55,740
sophisticated commands and how

375
00:13:55,750 --> 00:14:00,080
to use data around and start to process data in Octave.

