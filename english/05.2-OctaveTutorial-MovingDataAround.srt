1
00:00:00,880 --> 00:00:02,620
In this second tutorial video on

2
00:00:02,630 --> 00:00:03,920
Octave, I'd like to start

3
00:00:03,930 --> 00:00:07,330
to tell you how to move data around in Octave.

4
00:00:07,340 --> 00:00:08,760
So, if you have data for

5
00:00:08,770 --> 00:00:12,360
a machine learning problem, how do you load that data in Octave?

6
00:00:12,370 --> 00:00:13,670
How do you put it into matrix?

7
00:00:13,680 --> 00:00:15,280
How do you manipulate these matrices?

8
00:00:15,290 --> 00:00:16,990
How do you save the results?

9
00:00:17,000 --> 00:00:20,900
How do you move data around and operate with data?

10
00:00:22,900 --> 00:00:25,000
Here's my Octave window as

11
00:00:25,010 --> 00:00:29,280
before, picking up from where we left off in the last video.

12
00:00:29,290 --> 00:00:31,130
If I type A, that's

13
00:00:31,140 --> 00:00:31,910
the matrix so we generate it, right,

14
00:00:31,920 --> 00:00:35,160
with this command equals one, two,

15
00:00:35,170 --> 00:00:38,180
three, four, five, six, and

16
00:00:38,190 --> 00:00:40,700
this is a three by two matrix.

17
00:00:40,710 --> 00:00:42,420
The size command in Octave

18
00:00:42,430 --> 00:00:46,330
lets you, tells you what is the size of a matrix.

19
00:00:46,340 --> 00:00:48,170
So size A returns three, two.

20
00:00:48,180 --> 00:00:50,170
It turns out that

21
00:00:50,180 --> 00:00:52,120
this size command itself is actually

22
00:00:52,130 --> 00:00:54,510
returning a one by two matrix.

23
00:00:54,520 --> 00:00:56,270
So you can actually set SZ equals

24
00:00:56,280 --> 00:00:58,370
size of A and SZ

25
00:00:58,380 --> 00:00:59,570
is now a one by two

26
00:00:59,580 --> 00:01:01,630
matrix where the first element

27
00:01:01,640 --> 00:01:04,690
of this is three, and the second element of this is two.

28
00:01:04,700 --> 00:01:07,480
So, if you just type size of SZ. Does SZ

29
00:01:07,490 --> 00:01:08,870
is a one by

30
00:01:08,880 --> 00:01:10,820
two matrix whose two elements

31
00:01:10,830 --> 00:01:13,710
contain the dimensions of the

32
00:01:13,720 --> 00:01:15,230
matrix A. You can

33
00:01:15,240 --> 00:01:17,730
also type size A one

34
00:01:17,740 --> 00:01:19,500
to give you back the first

35
00:01:19,510 --> 00:01:21,510
dimension of A, size

36
00:01:21,520 --> 00:01:22,670
of the first dimension of A.

37
00:01:22,680 --> 00:01:24,100
So that's the number

38
00:01:24,110 --> 00:01:26,310
of rows and size A two

39
00:01:26,320 --> 00:01:28,310
to give you back two, which

40
00:01:28,320 --> 00:01:29,550
is the number of columns in

41
00:01:29,560 --> 00:01:31,940
the matrix A. 

If you

42
00:01:31,950 --> 00:01:33,980
have a vector V, so

43
00:01:33,990 --> 00:01:36,020
let's say V equals one, two,

44
00:01:36,030 --> 00:01:38,040
three, four, and you

45
00:01:38,050 --> 00:01:40,810
type length V.  What

46
00:01:40,820 --> 00:01:42,050
this does is it gives you

47
00:01:42,060 --> 00:01:44,160
the size of the longest dimension.

48
00:01:44,170 --> 00:01:45,580
So you can also type

49
00:01:45,590 --> 00:01:48,490
length A and because

50
00:01:48,500 --> 00:01:49,850
A is a three by

51
00:01:49,860 --> 00:01:52,320
two matrix, the longer

52
00:01:52,330 --> 00:01:53,800
dimension is of size

53
00:01:53,810 --> 00:01:56,070
three, so this should print out three.

54
00:01:56,080 --> 00:01:58,800
But usually we apply length only to vectors.

55
00:01:58,810 --> 00:02:00,190
So you know, length one, two,

56
00:02:00,200 --> 00:02:02,220
three, four, five, rather

57
00:02:02,230 --> 00:02:03,980
than apply length to matrices

58
00:02:03,990 --> 00:02:07,090
because that's a little more confusing.

59
00:02:07,620 --> 00:02:10,060
Now, let's look

60
00:02:10,070 --> 00:02:11,850
at how the low data and

61
00:02:11,860 --> 00:02:13,710
find data on the file system.

62
00:02:13,720 --> 00:02:15,210
When we start an Octave

63
00:02:15,220 --> 00:02:16,910
we're usually, we're often in

64
00:02:16,920 --> 00:02:19,030
a path that

65
00:02:19,040 --> 00:02:21,740
is, you know, the location of where the Octave location is.

66
00:02:21,750 --> 00:02:24,050
So the PWD command shows

67
00:02:24,060 --> 00:02:25,630
the current directory, or the

68
00:02:25,640 --> 00:02:28,670
current path that Octave is in.

69
00:02:28,680 --> 00:02:31,910
So right now we're in this maybe somewhat off scale directory.

70
00:02:31,920 --> 00:02:33,990
The CD command stands

71
00:02:34,000 --> 00:02:35,320
for change directory, so I

72
00:02:35,330 --> 00:02:40,640
can go to C:/Users/Ang/Desktop, and

73
00:02:40,650 --> 00:02:43,620
now I'm in, you know, in my Desktop

74
00:02:43,630 --> 00:02:45,890
and if I type OS,

75
00:02:45,900 --> 00:02:49,420
OS is, it comes from a Unix or a Linux command.

76
00:02:49,430 --> 00:02:50,620
But, OS will list the

77
00:02:50,630 --> 00:02:52,410
directories on my desktop and

78
00:02:52,420 --> 00:02:54,130
so these are the files

79
00:02:54,140 --> 00:02:57,330
that are on my Desktop right now.

80
00:03:15,850 --> 00:03:17,820
In fact, on my desktop are

81
00:03:17,830 --> 00:03:19,830
two files: Features X and

82
00:03:19,840 --> 00:03:21,610
Price Y that's maybe come

83
00:03:21,620 --> 00:03:23,610
from a machine learning problem I want to solve.

84
00:03:23,620 --> 00:03:25,750
So, here's my desktop.

85
00:03:25,760 --> 00:03:29,090
Here's Features X, and

86
00:03:29,100 --> 00:03:31,620
Features X is this window,

87
00:03:31,630 --> 00:03:34,450
excuse me, is this file with two columns of data.

88
00:03:34,460 --> 00:03:36,740
This is actually my housing prices data.

89
00:03:36,750 --> 00:03:38,350
So I think, you know, I

90
00:03:38,360 --> 00:03:40,630
think I have forty-seven rows in this data set.

91
00:03:40,640 --> 00:03:42,340
And so the first house

92
00:03:42,350 --> 00:03:43,960
has size two hundred four

93
00:03:43,970 --> 00:03:46,180
square feet, has three bedrooms; second

94
00:03:46,190 --> 00:03:47,350
house has sixteen hundred square

95
00:03:47,360 --> 00:03:49,870
feet, has three bedrooms; and so on.

96
00:03:49,880 --> 00:03:52,280
And Price Y is this

97
00:03:52,290 --> 00:03:55,030
file that has

98
00:03:55,040 --> 00:03:57,550
the prices of the data in my training set.

99
00:03:57,560 --> 00:03:59,710
So, Features X and

100
00:03:59,720 --> 00:04:03,020
Price Y are just text files with my data.

101
00:04:03,030 --> 00:04:04,720
How do I load this data into Octave?

102
00:04:04,730 --> 00:04:06,080
Well, I just type

103
00:04:06,090 --> 00:04:08,140
the command load Features X dot

104
00:04:08,150 --> 00:04:09,980
dat and if I

105
00:04:09,990 --> 00:04:11,950
do that, I load the Features X

106
00:04:11,960 --> 00:04:15,760
and can load Price Y dot dat. And

107
00:04:15,770 --> 00:04:17,300
by the way, there are multiple ways to do this.

108
00:04:17,310 --> 00:04:19,220
This command if you put

109
00:04:19,230 --> 00:04:20,840
Features X dot dat on that

110
00:04:20,850 --> 00:04:22,540
in strings and load it like so.

111
00:04:22,550 --> 00:04:25,480
This is a typo there.

112
00:04:25,490 --> 00:04:27,300
This is an equivalent command.

113
00:04:27,310 --> 00:04:29,350
So you can, this

114
00:04:29,360 --> 00:04:31,990
way I'm just putting the file name of the string

115
00:04:32,000 --> 00:04:34,130
in the founding in a

116
00:04:34,140 --> 00:04:35,690
string and in an

117
00:04:35,700 --> 00:04:38,920
Octave use single quotes to

118
00:04:38,930 --> 00:04:41,900
represent strings, like so.

119
00:04:41,910 --> 00:04:42,850
So that's a string, and we

120
00:04:42,860 --> 00:04:45,420
can load the file

121
00:04:45,430 --> 00:04:48,290
whose name is given by that string.

122
00:04:48,300 --> 00:04:50,950
Now the WHO command now

123
00:04:50,960 --> 00:04:52,470
shows me what variables I

124
00:04:52,480 --> 00:04:54,560
have in my Octave workspace.

125
00:04:54,570 --> 00:04:56,320
So Who shows me whether

126
00:04:56,330 --> 00:04:59,940
the variables that Octave has in memory currently.

127
00:04:59,950 --> 00:05:01,360
Features X and Price Y

128
00:05:01,370 --> 00:05:02,970
are among them, as well as

129
00:05:02,980 --> 00:05:04,160
the variables that, you know,

130
00:05:04,170 --> 00:05:06,300
we created earlier in this session.

131
00:05:06,310 --> 00:05:09,120
So I can type Features X

132
00:05:09,130 --> 00:05:11,040
to display features X. And

133
00:05:11,050 --> 00:05:14,190
there's my data.

134
00:05:14,200 --> 00:05:16,400
And I can type size features

135
00:05:16,410 --> 00:05:17,980
X and that's my

136
00:05:17,990 --> 00:05:20,450
47 by two matrix.

137
00:05:20,460 --> 00:05:22,310
And some of these size, press

138
00:05:22,320 --> 00:05:23,710
Y, that gives me

139
00:05:23,720 --> 00:05:26,740
my 47 by one vector.

140
00:05:26,750 --> 00:05:30,110
This is a 47 dimensional vector.

141
00:05:30,120 --> 00:05:32,020
This is all common vector that

142
00:05:32,030 --> 00:05:35,230
has all the prices Y in my training set.

143
00:05:35,240 --> 00:05:37,590
Now the who function shows

144
00:05:37,600 --> 00:05:40,050
you one of the variables that, in the current workspace.

145
00:05:40,060 --> 00:05:42,170
There's also the who S

146
00:05:42,180 --> 00:05:45,330
variable that gives you the detailed view.

147
00:05:45,340 --> 00:05:47,260
And so this also, with

148
00:05:47,270 --> 00:05:48,560
an S at the end this also

149
00:05:48,570 --> 00:05:49,910
lists my variables except that it

150
00:05:49,920 --> 00:05:51,780
now lists the sizes as well.

151
00:05:51,790 --> 00:05:52,730
So A is a three by

152
00:05:52,740 --> 00:05:54,710
two matrix and features

153
00:05:54,720 --> 00:05:56,470
X as a 47 by 2 matrix.

154
00:05:56,480 --> 00:05:59,280
Price Y is a 47 by one matrix.

155
00:05:59,290 --> 00:06:01,120
Meaning this is just a vector.

156
00:06:01,130 --> 00:06:03,350
And it shows, you know, how many bytes of memory it's taking up.

157
00:06:03,360 --> 00:06:06,000
As well as what type of data this is.

158
00:06:06,010 --> 00:06:07,750
Double means double position floating

159
00:06:07,760 --> 00:06:08,810
point so that just means that

160
00:06:08,820 --> 00:06:12,510
these are real values, the floating point numbers.

161
00:06:13,120 --> 00:06:14,160
Now if you want to get

162
00:06:14,170 --> 00:06:17,330
rid of a variable you can use the clear command.

163
00:06:17,340 --> 00:06:21,120
So clear features X and type whose again.

164
00:06:21,130 --> 00:06:23,430
You notice that the features X

165
00:06:23,440 --> 00:06:26,750
variable has now disappeared.

166
00:06:27,270 --> 00:06:28,600
And how do we save data?

167
00:06:28,610 --> 00:06:28,950
Let's see.

168
00:06:28,960 --> 00:06:30,310
Let's take the variable V and

169
00:06:30,320 --> 00:06:33,050
say that it's a price Y 1 colon 10.

170
00:06:33,060 --> 00:06:34,780
This sets V to be

171
00:06:34,790 --> 00:06:38,320
the first 10 elements of

172
00:06:38,860 --> 00:06:43,210
vector Y. So let's type who or whose.

173
00:06:43,220 --> 00:06:46,580
Whereas Y was a 47 by 1 vector.

174
00:06:46,590 --> 00:06:48,380
V is now 10 by 1.

175
00:06:48,390 --> 00:06:50,770
B equals price Y, one

176
00:06:50,780 --> 00:06:52,320
column ten that sets it

177
00:06:52,330 --> 00:06:53,490
to the just the first ten

178
00:06:53,500 --> 00:06:55,620
elements of Y. Let's say

179
00:06:55,630 --> 00:06:57,350
I wanna save this to date to disc

180
00:06:57,360 --> 00:07:00,110
the command save, hello.mat

181
00:07:00,120 --> 00:07:02,300
V. This will

182
00:07:02,310 --> 00:07:04,360
save the variable V into

183
00:07:04,370 --> 00:07:05,710
a file called hello.mat.

184
00:07:05,720 --> 00:07:08,630
So let's do that.

185
00:07:08,640 --> 00:07:11,020
And now a file

186
00:07:11,030 --> 00:07:13,160
has appeared on my Desktop, you

187
00:07:13,170 --> 00:07:15,030
know, called Hello.mat.

188
00:07:15,040 --> 00:07:16,520
I happen to have MATLAB installed

189
00:07:16,530 --> 00:07:17,950
in this window, which is why,

190
00:07:17,960 --> 00:07:19,640
you know, this icon looks

191
00:07:19,650 --> 00:07:21,570
like this because Windows is recognized

192
00:07:21,580 --> 00:07:23,480
as it's a MATLAB file,but don't

193
00:07:23,490 --> 00:07:24,880
worry about it if this file

194
00:07:24,890 --> 00:07:25,970
looks like it has a different

195
00:07:25,980 --> 00:07:28,740
icon on your machine and

196
00:07:28,750 --> 00:07:31,010
let's say I clear all my variables.

197
00:07:31,020 --> 00:07:32,540
So, if you type clear without

198
00:07:32,550 --> 00:07:36,070
anything then this actually deletes all of the variables in your workspace.

199
00:07:36,080 --> 00:07:39,040
So there's now nothing left in the workspace.

200
00:07:39,050 --> 00:07:41,830
And if I load hello.mat,

201
00:07:41,840 --> 00:07:44,370
I can now load back my

202
00:07:44,380 --> 00:07:46,020
variable v, which is

203
00:07:46,030 --> 00:07:47,790
the data that I

204
00:07:47,800 --> 00:07:50,950
previously saved into the hello.mat file.

205
00:07:51,020 --> 00:07:54,620
So, hello.mat, what we did just now to save hello.mat

206
00:07:54,630 --> 00:07:55,860
to view, this save the

207
00:07:55,870 --> 00:07:57,840
data in a binary format,

208
00:07:57,850 --> 00:07:59,650
a somewhat more compressed binary format.

209
00:07:59,660 --> 00:08:00,990
So if v is a lot

210
00:08:01,000 --> 00:08:03,870
of data, this, you know, will be somewhat more compressing.

211
00:08:03,880 --> 00:08:05,640
Will take off less the space.

212
00:08:05,650 --> 00:08:06,750
If you want to save your

213
00:08:06,760 --> 00:08:08,900
data in a human readable

214
00:08:08,910 --> 00:08:11,850
format then you type save hello.text

215
00:08:11,860 --> 00:08:14,100
the variable v and then -ascii.

216
00:08:14,110 --> 00:08:16,010
So, this will save

217
00:08:16,020 --> 00:08:18,830
it as a text

218
00:08:18,840 --> 00:08:21,330
or as ascii format of text.

219
00:08:21,340 --> 00:08:22,790
And now, once I've done

220
00:08:22,800 --> 00:08:24,840
that, I have this file.

221
00:08:24,850 --> 00:08:26,120
Hello.text has just

222
00:08:26,130 --> 00:08:28,410
appeared on my desktop, and

223
00:08:28,420 --> 00:08:29,910
if I open this up, we

224
00:08:29,920 --> 00:08:30,940
see that this is a text

225
00:08:30,950 --> 00:08:33,890
file with my data saved away.

226
00:08:33,900 --> 00:08:36,540
So that's how you load and save data.

227
00:08:36,550 --> 00:08:38,800
Now let's talk a bit about how to manipulate data.

228
00:08:38,810 --> 00:08:40,470
Let's set a equals to that

229
00:08:40,480 --> 00:08:45,700
matrix of the game so is my three by two matrix.

230
00:08:45,710 --> 00:08:46,750
So as indexing.

231
00:08:46,760 --> 00:08:48,480
So type A 3, 2.

232
00:08:48,490 --> 00:08:51,190
This indexes into

233
00:08:51,200 --> 00:08:52,890
the 3, 2 elements of

234
00:08:52,900 --> 00:08:54,360
the matrix A. So, this

235
00:08:54,370 --> 00:08:56,390
is what, you know,

236
00:08:56,400 --> 00:08:57,500
in normally, we will write this

237
00:08:57,510 --> 00:09:00,420
as a subscript 3, 2

238
00:09:00,430 --> 00:09:03,560
or A subscript,

239
00:09:03,570 --> 00:09:05,370
you know, 3, 2

240
00:09:05,380 --> 00:09:06,950
and so that's the element and

241
00:09:06,960 --> 00:09:08,630
third row and second column

242
00:09:08,640 --> 00:09:11,580
of A which is the element of six.

243
00:09:11,590 --> 00:09:14,540
I can also type A to

244
00:09:14,550 --> 00:09:16,710
comma colon to fetch

245
00:09:16,720 --> 00:09:18,840
everything in the second row.

246
00:09:18,850 --> 00:09:22,800
So, the colon means every

247
00:09:22,810 --> 00:09:27,410
element along that row or column.

248
00:09:27,420 --> 00:09:29,250
So, a of 2 comma

249
00:09:29,260 --> 00:09:32,460
colon is this second row of a. Right.

250
00:09:32,470 --> 00:09:35,670
And similarly, if I do a colon comma 2

251
00:09:35,680 --> 00:09:38,170
then this means get everything in

252
00:09:38,180 --> 00:09:41,310
the second column of A. So, this gives me 2 4 6.

253
00:09:41,320 --> 00:09:42,920
Right this means of

254
00:09:42,930 --> 00:09:45,490
A.  everything, second column.

255
00:09:45,500 --> 00:09:46,960
So, this is my second

256
00:09:46,970 --> 00:09:49,640
column A, which is 2 4 6.

257
00:09:49,650 --> 00:09:51,270
Now, you can also

258
00:09:51,280 --> 00:09:54,100
use somewhat most of the sophisticated index in the operations.

259
00:09:54,110 --> 00:09:56,550
So So, we just click each of an example.

260
00:09:56,560 --> 00:09:58,540
You do this maybe less often,

261
00:09:58,550 --> 00:10:02,220
but let me do this A 1 3 comma colon.

262
00:10:02,230 --> 00:10:03,490
This means get all of

263
00:10:03,500 --> 00:10:07,440
the elements of A who's first indexes one or three.

264
00:10:07,450 --> 00:10:08,730
This means I get everything from

265
00:10:08,740 --> 00:10:10,060
the first and third rows of

266
00:10:10,070 --> 00:10:13,080
A and from all

267
00:10:13,240 --> 00:10:14,740
columns.

268
00:10:14,770 --> 00:10:16,790
So, this was the

269
00:10:16,800 --> 00:10:18,430
matrix A and so A

270
00:10:18,440 --> 00:10:21,890
1 3 comma colon means get

271
00:10:21,900 --> 00:10:23,240
everything from the first row

272
00:10:23,250 --> 00:10:24,990
and from the second row and

273
00:10:25,000 --> 00:10:27,100
from the third row and the

274
00:10:27,110 --> 00:10:28,250
colon means, you know, one both

275
00:10:28,260 --> 00:10:29,560
of first and the second

276
00:10:29,570 --> 00:10:31,030
columns and so this

277
00:10:31,040 --> 00:10:32,780
gives me this 1 2 5 6.

278
00:10:32,790 --> 00:10:34,320
Although, you use the source

279
00:10:34,330 --> 00:10:37,150
of more subscript index

280
00:10:37,160 --> 00:10:39,750
operations maybe somewhat less often.

281
00:10:40,210 --> 00:10:41,400
To show you what else we can do.

282
00:10:41,410 --> 00:10:43,510
Here's the A matrix and this

283
00:10:43,520 --> 00:10:47,210
source A colon, to give me the second column.

284
00:10:47,220 --> 00:10:49,750
You can also use this to do assignments.

285
00:10:49,760 --> 00:10:51,180
So I can take the second column of

286
00:10:51,190 --> 00:10:52,940
A and assign that to

287
00:10:52,950 --> 00:10:55,660
10, 11, 12, and

288
00:10:55,670 --> 00:10:58,110
if I do that I'm now, you

289
00:10:58,120 --> 00:10:59,280
know, taking the second column of

290
00:10:59,290 --> 00:11:02,700
a and I'm assigning this column vector 10, 11, 12 to it.

291
00:11:02,710 --> 00:11:05,470
So, now a is this matrix that's 1, 3, 5.

292
00:11:05,480 --> 00:11:08,720
And the second column has been replaced by 10, 11, 12.

293
00:11:08,730 --> 00:11:13,890
And here's another operation.

294
00:11:14,680 --> 00:11:15,800
Let's set A to be equal

295
00:11:15,810 --> 00:11:17,740
to A comma 100, 101,

296
00:11:17,750 --> 00:11:20,490
102 like so and what

297
00:11:20,870 --> 00:11:24,110
this will do is

298
00:11:24,120 --> 00:11:28,310
depend another column vector

299
00:11:28,480 --> 00:11:29,880
to the right.

300
00:11:29,890 --> 00:11:33,250
So, now, oops.

301
00:11:33,260 --> 00:11:35,760
I think I made a little mistake.

302
00:11:36,800 --> 00:11:41,180
Should have put semicolons there

303
00:11:41,700 --> 00:11:44,190
and now A is equals to this.

304
00:11:44,200 --> 00:11:44,400
Okay?

305
00:11:44,410 --> 00:11:45,280
I hope that makes sense.

306
00:11:45,290 --> 00:11:46,410
So this 100, 101, 102.

307
00:11:46,420 --> 00:11:48,810
This is a column vector

308
00:11:48,820 --> 00:11:51,640
and what we did

309
00:11:51,650 --> 00:11:53,320
was we set A, take

310
00:11:53,330 --> 00:11:56,140
A and set it to the original definition.

311
00:11:56,150 --> 00:11:57,370
And then we put that column

312
00:11:57,380 --> 00:11:59,130
vector to the right

313
00:11:59,140 --> 00:12:00,180
and so, we ended up taking

314
00:12:00,190 --> 00:12:04,220
the matrix A and--which was

315
00:12:04,230 --> 00:12:05,350
these six elements on the left.

316
00:12:05,360 --> 00:12:06,800
So we took matrix

317
00:12:06,810 --> 00:12:08,540
A and we appended another

318
00:12:08,550 --> 00:12:09,770
column vector to the right;

319
00:12:09,780 --> 00:12:11,770
which is now why A is

320
00:12:11,780 --> 00:12:16,190
a three by three matrix that looks like that.

321
00:12:16,200 --> 00:12:18,000
And finally, one neat

322
00:12:18,010 --> 00:12:19,800
trick that I sometimes use

323
00:12:19,810 --> 00:12:21,950
if you do just a and just a colon like so.

324
00:12:21,960 --> 00:12:25,580
This is a somewhat special case syntax.

325
00:12:25,590 --> 00:12:28,660
What this means is that put all elements with A into

326
00:12:28,670 --> 00:12:30,840
a single column vector

327
00:12:30,850 --> 00:12:34,500
and this gives me a 9 by 1 vector.

328
00:12:34,510 --> 00:12:37,930
They adjust the other ones are combined together.

329
00:12:39,700 --> 00:12:45,290
Just a couple more examples. Let's see. Let's

330
00:12:45,300 --> 00:12:49,650
say I set A to be equal to 123456, okay?

331
00:12:49,900 --> 00:12:53,930
And let's say

332
00:12:54,060 --> 00:12:55,670
I set a B to B

333
00:12:55,680 --> 00:12:58,960
equal to 11, 12, 13, 14, 15, 16.

334
00:12:58,970 --> 00:13:00,330
I can create a new

335
00:13:00,340 --> 00:13:03,190
matrix C as A B.

336
00:13:03,200 --> 00:13:05,070
This just means my

337
00:13:05,080 --> 00:13:06,610
Matrix A. Here's my Matrix

338
00:13:06,620 --> 00:13:08,400
B and I've set C

339
00:13:08,410 --> 00:13:11,060
to be equal to AB.

340
00:13:11,070 --> 00:13:12,100
What I'm doing is I'm taking

341
00:13:12,110 --> 00:13:15,410
these two matrices and just concatenating onto each other.

342
00:13:15,420 --> 00:13:18,410
So the left, matrix A on the left.

343
00:13:18,420 --> 00:13:20,790
And I have the matrix B on the right.

344
00:13:20,800 --> 00:13:23,500
And that's how I formed

345
00:13:23,830 --> 00:13:27,030
this matrix C by putting them together.

346
00:13:27,110 --> 00:13:28,910
I can also do C equals

347
00:13:28,920 --> 00:13:31,990
A semicolon B. The semi

348
00:13:32,000 --> 00:13:35,540
colon notation means that

349
00:13:35,550 --> 00:13:38,870
I go put the next thing at the bottom.

350
00:13:38,880 --> 00:13:39,900
So, I'll do is a

351
00:13:39,910 --> 00:13:41,160
equals semicolon B. It also

352
00:13:41,170 --> 00:13:42,450
puts the matrices A

353
00:13:42,460 --> 00:13:44,010
and B together except that it

354
00:13:44,020 --> 00:13:47,390
now puts them on top of each other.

355
00:13:47,870 --> 00:13:49,630
so now I have A on top and B at the bottom and C here

356
00:13:49,640 --> 00:13:52,020
is now in 6 by 2 matrix.

357
00:13:52,030 --> 00:13:54,260
So, just say the semicolon

358
00:13:54,270 --> 00:13:56,650
thing usually means, you know, go to the next line.

359
00:13:56,660 --> 00:13:58,420
So, C is comprised by a

360
00:13:58,430 --> 00:13:59,560
and then go to the bottom

361
00:13:59,570 --> 00:14:00,680
of that and then put b

362
00:14:00,690 --> 00:14:02,380
in the bottom and by the

363
00:14:02,390 --> 00:14:04,160
way, this A B is

364
00:14:04,170 --> 00:14:05,740
the same as A, B and

365
00:14:05,750 --> 00:14:09,360
so you know, either of these gives you the same result.

366
00:14:10,310 --> 00:14:11,890
So, with that, hopefully you

367
00:14:11,900 --> 00:14:14,250
now know how to construct

368
00:14:14,260 --> 00:14:17,180
matrices and hopefully starts

369
00:14:17,190 --> 00:14:18,140
to show you some of the

370
00:14:18,150 --> 00:14:19,840
commands that you use

371
00:14:19,850 --> 00:14:21,930
to quickly put together matrices and

372
00:14:21,940 --> 00:14:23,370
take matrices and, you know,

373
00:14:23,380 --> 00:14:24,990
slam them together to form

374
00:14:25,000 --> 00:14:26,970
bigger matrices, and with

375
00:14:26,980 --> 00:14:28,890
just a few lines of code, Octave

376
00:14:28,900 --> 00:14:30,700
is very convenient in terms

377
00:14:30,710 --> 00:14:32,640
of how quickly we can assemble

378
00:14:32,650 --> 00:14:36,040
complex matrices and move data around.

379
00:14:36,050 --> 00:14:38,010
So that's it for moving data around.

380
00:14:38,020 --> 00:14:39,320
In the next video we'll start

381
00:14:39,330 --> 00:14:40,850
to talk about how to actually

382
00:14:40,860 --> 00:14:45,870
do complex computations on this, on our data.

383
00:14:46,830 --> 00:14:48,090
So, hopefully that gives you

384
00:14:48,100 --> 00:14:49,890
a sense of how, with

385
00:14:49,900 --> 00:14:51,020
just a few commands, you can

386
00:14:51,030 --> 00:14:54,580
very quickly move data around in Octave.

387
00:14:54,590 --> 00:14:56,170
You know, you load and save vectors and

388
00:14:56,180 --> 00:14:58,080
matrices, load and save data,

389
00:14:58,090 --> 00:15:00,120
put together matrices to create

390
00:15:00,130 --> 00:15:02,910
bigger matrices, index into or select

391
00:15:02,920 --> 00:15:04,990
specific elements on the matrices.

392
00:15:05,000 --> 00:15:05,940
I know I went through a lot

393
00:15:05,950 --> 00:15:06,970
of commands, so I think

394
00:15:06,980 --> 00:15:08,160
the best thing for you to do

395
00:15:08,170 --> 00:15:09,640
is afterward, to look

396
00:15:09,650 --> 00:15:12,180
at the transcript of the things I was typing.

397
00:15:12,190 --> 00:15:13,050
You know, look at it.

398
00:15:13,060 --> 00:15:14,630
Look at the coursework site and download

399
00:15:14,640 --> 00:15:15,940
the transcript of the session

400
00:15:15,950 --> 00:15:17,430
from there and look through

401
00:15:17,440 --> 00:15:18,810
the transcript and type some

402
00:15:18,820 --> 00:15:21,930
of those commands into Octave yourself

403
00:15:21,940 --> 00:15:24,730
and start to play with these commands and get it to work.

404
00:15:24,740 --> 00:15:28,080
And obviously, you know, there's no point at all to try to memorize all these commands.

405
00:15:28,090 --> 00:15:29,960
It's just, but what you

406
00:15:29,970 --> 00:15:31,730
should do is, hopefully from

407
00:15:31,740 --> 00:15:32,860
this video you have gotten a

408
00:15:32,870 --> 00:15:35,090
sense of the sorts of things you can do.

409
00:15:35,100 --> 00:15:36,510
So that when later on when

410
00:15:36,520 --> 00:15:37,810
you are trying to program a learning

411
00:15:37,820 --> 00:15:39,590
algorithms yourself, if you

412
00:15:39,600 --> 00:15:40,920
are trying to find a specific

413
00:15:40,930 --> 00:15:42,430
command that maybe you think

414
00:15:42,440 --> 00:15:43,760
Octave can do because you think

415
00:15:43,770 --> 00:15:45,230
you might have seen it here, you

416
00:15:45,240 --> 00:15:47,230
should refer to the transcript

417
00:15:47,240 --> 00:15:48,550
of the session and look through

418
00:15:48,560 --> 00:15:51,640
that in order to find the commands you wanna use.

419
00:15:51,650 --> 00:15:52,980
So, that's it for

420
00:15:52,990 --> 00:15:54,810
moving data around and in

421
00:15:54,820 --> 00:15:56,110
the next video what I'd like

422
00:15:56,120 --> 00:15:57,730
to do is start to tell

423
00:15:57,740 --> 00:15:59,150
you how to actually do

424
00:15:59,160 --> 00:16:01,400
complex computations on our

425
00:16:01,410 --> 00:16:03,540
data, and how to

426
00:16:03,550 --> 00:16:04,840
compute on the data, and

427
00:16:04,850 --> 00:16:08,060
actually start to implement learning algorithms.

