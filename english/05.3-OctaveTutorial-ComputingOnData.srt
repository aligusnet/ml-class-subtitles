1
00:00:00,220 --> 00:00:01,380
Now that you know how to load

2
00:00:01,390 --> 00:00:03,050
and save data in Octave, put

3
00:00:03,060 --> 00:00:04,720
your data into matrices and so

4
00:00:04,730 --> 00:00:06,280
on. In this video I'd like

5
00:00:06,290 --> 00:00:08,230
to show you how to do computational

6
00:00:08,240 --> 00:00:10,330
operations on data and

7
00:00:10,340 --> 00:00:12,310
later on we'll be using this

8
00:00:12,320 --> 00:00:16,800
sorts of computation operations to implement our learning algorithms.

9
00:00:17,100 --> 00:00:18,860
Let's get started.

10
00:00:19,610 --> 00:00:20,990
Here's my Octave window.

11
00:00:21,000 --> 00:00:22,710
Let me just quickly initialize some

12
00:00:22,720 --> 00:00:24,930
variables to use

13
00:00:24,940 --> 00:00:26,790
for examples and set A

14
00:00:26,800 --> 00:00:29,270
to be a 3 by 2 matrix.

15
00:00:29,820 --> 00:00:31,500
and set B to a

16
00:00:31,510 --> 00:00:33,320
3 by 2 matrix and let's

17
00:00:33,330 --> 00:00:35,110
set C to a

18
00:00:35,120 --> 00:00:39,140
2 by 2 matrix, like so.

19
00:00:39,150 --> 00:00:41,950
Now, let's say I want to multiply 2 of my matrices.

20
00:00:41,960 --> 00:00:44,070
So, let's say I wanna compute AxC.

21
00:00:44,080 --> 00:00:45,730
I just type AxC.

22
00:00:45,740 --> 00:00:48,850
So, it's a 3 by 2 matrix times a 2 by 2 matrix.

23
00:00:48,860 --> 00:00:52,150
This gives me this 3 by 2 matrix.

24
00:00:52,160 --> 00:00:53,730
You can also do elements wise

25
00:00:53,740 --> 00:00:56,310
operations and do A.xB

26
00:00:56,500 --> 00:00:57,600
and what this would do is

27
00:00:57,610 --> 00:00:59,090
they'll take each elements of A

28
00:00:59,100 --> 00:01:00,580
and multiply it by

29
00:01:00,590 --> 00:01:02,550
the corresponding elements of B.

30
00:01:02,560 --> 00:01:06,090
So, that's A, that's B, that's A.xB.

31
00:01:06,700 --> 00:01:09,410
So, for example, the first element

32
00:01:09,420 --> 00:01:10,940
gives 1 times 11 which gives 11.

33
00:01:10,950 --> 00:01:14,020
The second element gives

34
00:01:14,030 --> 00:01:16,750
2 x 12 which gives 24 and so on.

35
00:01:16,760 --> 00:01:18,170
So it is the element

36
00:01:18,180 --> 00:01:19,660
wise multiplication of two

37
00:01:19,670 --> 00:01:21,510
matrices, and in general

38
00:01:21,520 --> 00:01:23,370
the P rand tends to,

39
00:01:23,380 --> 00:01:25,110
it's usually used, to denote

40
00:01:25,120 --> 00:01:27,370
element wise operations in octave.

41
00:01:27,380 --> 00:01:28,860
So, here's a matrix

42
00:01:28,870 --> 00:01:31,720
A and I'll do A dot carry 2.

43
00:01:31,730 --> 00:01:33,000
This gives me the multi,

44
00:01:33,010 --> 00:01:35,680
the element wise squaring of

45
00:01:35,690 --> 00:01:37,370
A, so 1 squared

46
00:01:37,380 --> 00:01:40,860
is 1, 2 squared is 4 and so on.

47
00:01:40,870 --> 00:01:42,250
Let's set V to a vector,

48
00:01:42,260 --> 00:01:46,170
we'll set V as 123 as a column vector.

49
00:01:46,180 --> 00:01:47,850
You can also do 1.

50
00:01:47,860 --> 00:01:49,650
over V to do

51
00:01:49,660 --> 00:01:51,510
the element wise reciprocal of

52
00:01:51,520 --> 00:01:53,200
V so this gives me

53
00:01:53,210 --> 00:01:55,530
one over one, one over two and one over three.

54
00:01:55,540 --> 00:01:56,880
This works too for matrices so

55
00:01:56,890 --> 00:01:58,460
one dot over A, gives me

56
00:01:58,470 --> 00:02:00,510
that element wise inverse of

57
00:02:00,520 --> 00:02:03,330
A.  and once

58
00:02:03,340 --> 00:02:04,820
again the P radians gives use

59
00:02:04,830 --> 00:02:08,150
a clue that this is an elements wise operation.

60
00:02:08,160 --> 00:02:09,650
To also do things like log

61
00:02:09,660 --> 00:02:11,590
V This is an element wise

62
00:02:11,600 --> 00:02:14,200
logarithm of, the

63
00:02:14,210 --> 00:02:15,410
V, E to the

64
00:02:15,420 --> 00:02:17,380
V, is the base E

65
00:02:17,390 --> 00:02:20,320
exponentiation of these elements

66
00:02:20,330 --> 00:02:21,400
of this is E, this is E

67
00:02:21,410 --> 00:02:23,060
squared EQ, this is

68
00:02:23,070 --> 00:02:26,110
V. And I

69
00:02:26,120 --> 00:02:28,220
can also do apps V to

70
00:02:28,230 --> 00:02:30,150
take the element wise absolute

71
00:02:30,160 --> 00:02:32,030
value of V. So here,

72
00:02:32,040 --> 00:02:34,420
V was all positive, abs, say

73
00:02:34,430 --> 00:02:36,490
minus 1 to minus 3,

74
00:02:36,500 --> 00:02:38,530
the element wise Absolute

75
00:02:38,540 --> 00:02:40,420
value gives me back these

76
00:02:40,430 --> 00:02:43,800
non-negative values and negative

77
00:02:43,810 --> 00:02:45,450
V gives me the minus

78
00:02:45,460 --> 00:02:46,720
of V. This is the same

79
00:02:46,730 --> 00:02:49,050
as -1xV but usually

80
00:02:49,060 --> 00:02:50,630
you just write negative V and

81
00:02:50,640 --> 00:02:55,980
so that negative 1xV and what else can you do?

82
00:02:55,990 --> 00:02:57,130
Here's another neat trick.

83
00:02:57,140 --> 00:02:58,280
So Let's see.

84
00:02:58,290 --> 00:03:01,390
Let's say I want to take V and increment each of these elements by 1.

85
00:03:01,400 --> 00:03:02,490
Well, one way to do

86
00:03:02,500 --> 00:03:05,410
it is by constructing a

87
00:03:05,420 --> 00:03:09,650
3 by 1 vector

88
00:03:09,660 --> 00:03:12,630
this all ones and adding that to V. So, they do that.

89
00:03:12,640 --> 00:03:15,340
This increments V by for 123 to 234.

90
00:03:15,350 --> 00:03:16,780
The way I did

91
00:03:16,790 --> 00:03:21,880
that was length of V, is three.

92
00:03:21,890 --> 00:03:23,700
So ones, length of

93
00:03:23,710 --> 00:03:25,810
V by one, this is ones

94
00:03:25,820 --> 00:03:27,040
of three by one.

95
00:03:27,050 --> 00:03:29,570
So that's ones, three by one.

96
00:03:29,580 --> 00:03:31,220
On the right and what I

97
00:03:31,230 --> 00:03:33,180
did was B plus ones,

98
00:03:33,190 --> 00:03:35,140
V by one, which is adding

99
00:03:35,150 --> 00:03:36,600
this vector of all ones

100
00:03:36,610 --> 00:03:38,100
to B. And so this increments

101
00:03:38,110 --> 00:03:40,300
V by one.

102
00:03:40,310 --> 00:03:41,960
And you, another simpler

103
00:03:41,970 --> 00:03:44,450
way to do that is to type V+ one, right?

104
00:03:44,460 --> 00:03:45,640
So that's V and

105
00:03:45,650 --> 00:03:46,990
V+ one also means to

106
00:03:47,000 --> 00:03:49,270
add one element wise to

107
00:03:49,280 --> 00:03:52,250
each of my elements of V.

108
00:03:52,410 --> 00:03:55,440
Now, let's talk about more operations.

109
00:03:55,450 --> 00:03:58,780
So, here's my matrix A. If you want to write A transpose.

110
00:03:58,790 --> 00:04:00,890
The way to do that is to write A prime.

111
00:04:00,900 --> 00:04:02,650
That's the apostrophe symbol.

112
00:04:02,660 --> 00:04:03,690
It's the left quote.

113
00:04:03,700 --> 00:04:05,340
So, on your keyboard

114
00:04:05,350 --> 00:04:06,940
you probably have a left

115
00:04:06,950 --> 00:04:08,050
quote and a right quote.

116
00:04:08,060 --> 00:04:09,940
So this is a at the

117
00:04:09,950 --> 00:04:12,280
standard quotation mark is a,

118
00:04:12,290 --> 00:04:14,750
what to say, a transpose

119
00:04:14,760 --> 00:04:16,130
to excuse me the, you

120
00:04:16,140 --> 00:04:17,210
know, a transpose of my

121
00:04:17,220 --> 00:04:18,850
major and of course

122
00:04:18,860 --> 00:04:20,390
a transpose if I transpose

123
00:04:20,400 --> 00:04:21,630
that again then I should

124
00:04:21,640 --> 00:04:26,530
get back my matrix A. Some more useful functions.

125
00:04:26,540 --> 00:04:28,600
Let's say locate A is

126
00:04:28,610 --> 00:04:30,510
1 15 to 0.5.

127
00:04:30,520 --> 00:04:34,240
So, it's a, you know, 1 by 4 matrix.

128
00:04:34,250 --> 00:04:36,210
Let's say set val equals max

129
00:04:36,220 --> 00:04:37,770
of A.  This returns the

130
00:04:37,780 --> 00:04:39,300
maximum value of A, which

131
00:04:39,310 --> 00:04:41,490
in this case is 15 and

132
00:04:41,500 --> 00:04:44,480
I can do val ind max

133
00:04:44,490 --> 00:04:47,110
A.  And this returns

134
00:04:47,120 --> 00:04:49,620
val of int which are

135
00:04:49,630 --> 00:04:51,230
the maximum value of A

136
00:04:51,240 --> 00:04:52,930
which is 15 as was the index.

137
00:04:52,940 --> 00:04:55,970
So the elements number two of A that 15.

138
00:04:55,980 --> 00:04:58,750
So, in is my index into this.

139
00:04:58,760 --> 00:05:00,130
Just as a warning: if

140
00:05:00,140 --> 00:05:03,170
you do max A where A is a matrix.

141
00:05:03,180 --> 00:05:04,770
What this does is this actually

142
00:05:04,780 --> 00:05:07,850
does the column wise maximum,

143
00:05:07,860 --> 00:05:11,210
but say a little bit more about this in a second.

144
00:05:11,570 --> 00:05:13,250
So, using this example of the

145
00:05:13,260 --> 00:05:17,030
variable lowercase A. If I do A less than three.

146
00:05:17,040 --> 00:05:19,580
This does the element wise operation.

147
00:05:19,590 --> 00:05:20,950
Element wise comparison.

148
00:05:20,960 --> 00:05:22,570
So, the first element

149
00:05:22,580 --> 00:05:24,840
Of A is less than three equals to one.

150
00:05:24,850 --> 00:05:26,280
Second elements of A is

151
00:05:26,290 --> 00:05:27,420
not less than three, so

152
00:05:27,430 --> 00:05:29,940
this value is zero, because it is also.

153
00:05:29,950 --> 00:05:31,290
The third and fourth numbers of

154
00:05:31,300 --> 00:05:32,860
A are the lesson,

155
00:05:32,870 --> 00:05:35,600
I meant less than three, third and fourth elements are less than three.

156
00:05:35,610 --> 00:05:36,800
So this is one, one, so

157
00:05:36,810 --> 00:05:38,450
this is just the element wide

158
00:05:38,460 --> 00:05:40,270
comparison of all four

159
00:05:40,280 --> 00:05:42,510
element variable lower case

160
00:05:42,520 --> 00:05:44,010
three and it returns true

161
00:05:44,020 --> 00:05:47,390
or false depending on whether or not it's less than three.

162
00:05:47,400 --> 00:05:48,870
Now, if I do find

163
00:05:48,880 --> 00:05:50,700
A less than three, this would

164
00:05:50,710 --> 00:05:52,180
tell me which are the

165
00:05:52,190 --> 00:05:53,850
elements of A that the

166
00:05:53,860 --> 00:05:55,190
variable A of less than three

167
00:05:55,200 --> 00:05:56,950
and in this case the 1st, 3rd

168
00:05:56,960 --> 00:06:00,190
and 4th elements are lesson three.

169
00:06:00,220 --> 00:06:01,420
For my next example Oh, let

170
00:06:01,430 --> 00:06:03,330
me set eight be code to

171
00:06:03,340 --> 00:06:05,730
magic three. The magic

172
00:06:05,740 --> 00:06:07,440
function returns. Let's type help magic. The magic function returns. Functions called

173
00:06:07,450 --> 00:06:09,380


174
00:06:09,390 --> 00:06:12,550


175
00:06:12,560 --> 00:06:15,340
Returns this matrices called magic squares.

176
00:06:15,350 --> 00:06:17,730
They have this, you know,

177
00:06:17,740 --> 00:06:20,020
mathematical property that all

178
00:06:20,030 --> 00:06:21,550
of their rows and columns and

179
00:06:21,560 --> 00:06:23,700
diagonals sum up to the same thing.

180
00:06:23,710 --> 00:06:25,570
So, you know, it's

181
00:06:25,580 --> 00:06:27,350
not actually useful for machine

182
00:06:27,360 --> 00:06:28,220
learning as far as I

183
00:06:28,230 --> 00:06:29,670
know, but I'm just using

184
00:06:29,680 --> 00:06:31,630
this as a convenient way,

185
00:06:31,640 --> 00:06:32,960
you know, to generate a 3

186
00:06:32,970 --> 00:06:36,210
by 3 matrix and this magic square screen.

187
00:06:36,220 --> 00:06:37,190
We have the power of 3

188
00:06:37,200 --> 00:06:39,500
at each row, each column and

189
00:06:39,510 --> 00:06:41,040
the diagonals all add up

190
00:06:41,050 --> 00:06:44,500
to the same thing, so it's kind of a mathematical construct.

191
00:06:44,510 --> 00:06:45,790
I use magic, I use this

192
00:06:45,800 --> 00:06:47,050
magic function only when I'm

193
00:06:47,060 --> 00:06:48,130
doing demos, or when I'm

194
00:06:48,140 --> 00:06:49,570
teaching Octave like this and

195
00:06:49,580 --> 00:06:51,060
I don't actually use it for

196
00:06:51,070 --> 00:06:53,850
any, you know, useful machine learning application.

197
00:06:53,860 --> 00:06:57,210
But, let's see, if I type RC equals find A greater than or equals 7.

198
00:06:59,390 --> 00:07:02,620
This finds all the elements

199
00:07:02,630 --> 00:07:03,760
of a that are greater than

200
00:07:03,770 --> 00:07:05,200
and equals to 7 and

201
00:07:05,210 --> 00:07:07,090
so, RC sense a row and column.

202
00:07:07,100 --> 00:07:09,390
So, the 11 element is greater than 7.

203
00:07:09,400 --> 00:07:10,970
The three two elements is

204
00:07:10,980 --> 00:07:13,190
greater than 7 and the two 3 elements is greater than 7.

205
00:07:13,200 --> 00:07:14,790
So let's see, the two, three

206
00:07:14,800 --> 00:07:18,840
element for example, is A two, three.

207
00:07:18,850 --> 00:07:21,110
Is seven, is this element

208
00:07:21,120 --> 00:07:24,230
out here, and that is indeed greater than or equal seven.

209
00:07:24,240 --> 00:07:26,020
By the way, I actually don't even

210
00:07:26,030 --> 00:07:27,600
memorize myself what these

211
00:07:27,610 --> 00:07:28,950
find functions do in the

212
00:07:28,960 --> 00:07:30,300
all these things do myself and

213
00:07:30,310 --> 00:07:31,380
whenever I use a find

214
00:07:31,390 --> 00:07:33,060
function, sometimes I forget

215
00:07:33,070 --> 00:07:34,780
myself exactly what does, and

216
00:07:34,790 --> 00:07:37,960
you know, type help find to look up the document.

217
00:07:37,970 --> 00:07:39,990
Okay, just two more things, if it's okay, to show you.

218
00:07:40,000 --> 00:07:41,530
One is the sum function.

219
00:07:41,540 --> 00:07:43,370
So here's my A and

220
00:07:43,380 --> 00:07:44,790
I type sum A. This adds

221
00:07:44,800 --> 00:07:46,500
up all the elements of A.

222
00:07:46,510 --> 00:07:47,620
And if I want to multiply them

223
00:07:47,630 --> 00:07:49,400
together, I type prod A.

224
00:07:49,410 --> 00:07:50,790
Prod sense of product,

225
00:07:50,800 --> 00:07:52,990
and it returns the products of

226
00:07:53,000 --> 00:07:55,550
these four elements of A.

227
00:07:56,040 --> 00:07:58,200
Floor A rounds down,

228
00:07:58,210 --> 00:07:59,460
these elements of A, so zero

229
00:07:59,470 --> 00:08:01,750
O point five gets rounded down to zero.

230
00:08:01,760 --> 00:08:03,370
And ceil, or ceiling A,

231
00:08:03,380 --> 00:08:04,800
gets rounded up, so zero

232
00:08:04,810 --> 00:08:06,210
point five, rounded up to

233
00:08:06,220 --> 00:08:10,450
the nearest integer, so zero point five gets rounded up to one.

234
00:08:10,870 --> 00:08:12,000
You can also.

235
00:08:12,010 --> 00:08:13,290
Let's see.

236
00:08:13,300 --> 00:08:14,350
Let me type rand 3.

237
00:08:14,360 --> 00:08:16,670
This generally sets a 3 by 3 matrix.

238
00:08:16,680 --> 00:08:20,450
If I type max randd 3, rand 3.

239
00:08:20,460 --> 00:08:21,810
What this does is it takes

240
00:08:21,820 --> 00:08:24,920
the element wise maximum of

241
00:08:24,930 --> 00:08:26,890
2 random 3 by 3 matrices.

242
00:08:26,900 --> 00:08:28,330
So, you'll notice all these

243
00:08:28,340 --> 00:08:28,990
numbers tend to be a bit on the

244
00:08:29,000 --> 00:08:30,890
large side because each of

245
00:08:30,900 --> 00:08:32,550
these is actually the max of

246
00:08:32,560 --> 00:08:35,100
a randomly, of element Y's

247
00:08:35,110 --> 00:08:38,240
max of two randomly generated matrices.

248
00:08:38,250 --> 00:08:40,270
This is my magic number.

249
00:08:40,280 --> 00:08:43,000
This was my magic square 3x3a.

250
00:08:43,010 --> 00:08:47,720
Let's say I type max A and then this will be it.

251
00:08:47,730 --> 00:08:49,940
Open, close, square brackets comma 1.

252
00:08:49,950 --> 00:08:51,350
What this does is

253
00:08:51,360 --> 00:08:53,590
this takes the column wise maximum.

254
00:08:53,600 --> 00:08:54,900
So, the maximum of the

255
00:08:54,910 --> 00:08:56,470
first column is eight, max

256
00:08:56,480 --> 00:08:58,320
of the second column is nine,

257
00:08:58,330 --> 00:09:00,670
the max of the third column is seven.

258
00:09:00,680 --> 00:09:02,090
This 1 means to take the

259
00:09:02,100 --> 00:09:03,690
max along the first dimension of

260
00:09:03,700 --> 00:09:05,930
A. 

In contrast, if

261
00:09:05,940 --> 00:09:07,900
I were to type max a, this

262
00:09:07,910 --> 00:09:09,960
funny notation 2 then this

263
00:09:09,970 --> 00:09:12,450
takes the per row maximum.

264
00:09:12,460 --> 00:09:13,420
So, the maximum for the first

265
00:09:13,430 --> 00:09:14,550
row is 8, max of

266
00:09:14,560 --> 00:09:16,570
second row is 7, max

267
00:09:16,580 --> 00:09:18,000
of the third row is 9

268
00:09:18,010 --> 00:09:21,590
and so this allows you to take maxes.

269
00:09:21,600 --> 00:09:24,770
You know, per row or per column.

270
00:09:24,780 --> 00:09:26,960
And if you want to, and

271
00:09:26,970 --> 00:09:29,010
remember it defaults to column

272
00:09:29,020 --> 00:09:30,050
mark wise elements on this,

273
00:09:30,060 --> 00:09:31,620
so if you want to find

274
00:09:31,630 --> 00:09:33,370
the maximum element in

275
00:09:33,380 --> 00:09:35,020
the entire matrix A, you

276
00:09:35,030 --> 00:09:36,950
can type max of max

277
00:09:36,960 --> 00:09:39,500
of A, like so, which is nine.

278
00:09:39,510 --> 00:09:40,660
Or you can turn A into

279
00:09:40,670 --> 00:09:42,480
a vector and type max

280
00:09:42,490 --> 00:09:44,740
of A colon, like

281
00:09:44,750 --> 00:09:46,860
so, this treats this as a vector

282
00:09:46,870 --> 00:09:51,270
and takes the max element of vector.

283
00:09:52,080 --> 00:09:54,250
Finally, let's set A

284
00:09:54,260 --> 00:09:56,220
to be a nine by nine magic square.

285
00:09:56,230 --> 00:09:57,790
So remember, the magic square

286
00:09:57,800 --> 00:09:59,940
has this property that every

287
00:09:59,950 --> 00:10:03,520
column in every row sums the same thing and also the diagonals.

288
00:10:03,530 --> 00:10:06,230
So here is 9X9 magic square.

289
00:10:06,240 --> 00:10:07,660
So let me just sum A one

290
00:10:07,670 --> 00:10:10,180
so this does a per column sum.

291
00:10:10,190 --> 00:10:11,090
And so I'm going to take each

292
00:10:11,100 --> 00:10:12,160
column of A and add

293
00:10:12,170 --> 00:10:13,690
them up and this, you

294
00:10:13,700 --> 00:10:15,350
know, lets us verify that indeed

295
00:10:15,360 --> 00:10:16,910
for 9 by 9 magic square.

296
00:10:16,920 --> 00:10:20,110
Every column adds up to 369 as of the same thing.

297
00:10:20,120 --> 00:10:21,990
Now, let's do the row wise sum.

298
00:10:22,000 --> 00:10:24,620
So, the sum A  comma 2

299
00:10:24,630 --> 00:10:28,020
and this sums

300
00:10:28,030 --> 00:10:29,200
up each row of A

301
00:10:29,210 --> 00:10:30,510
and each row of A

302
00:10:30,520 --> 00:10:32,100
also sums up to 369.

303
00:10:32,110 --> 00:10:34,490
Now let's sum the

304
00:10:34,500 --> 00:10:35,980
diagonal elements of A

305
00:10:35,990 --> 00:10:37,360
and make sure that they, that

306
00:10:37,370 --> 00:10:39,720
that also sums up to the same thing.

307
00:10:39,730 --> 00:10:40,860
So what I'm going to

308
00:10:40,870 --> 00:10:42,560
do is, construct a nine

309
00:10:42,570 --> 00:10:44,350
by nine identity matrix, that's

310
00:10:44,360 --> 00:10:45,990
I9, and let me

311
00:10:46,000 --> 00:10:49,310
take A and construct, multiply

312
00:10:49,320 --> 00:10:51,290
A elements wise.

313
00:10:51,300 --> 00:10:52,780
So here's my matrix of A.

314
00:10:52,790 --> 00:10:56,480
I'm gonna do A.xI9 and what

315
00:10:56,490 --> 00:10:58,010
this will do is take the

316
00:10:58,020 --> 00:10:59,970
element wise product of these

317
00:10:59,980 --> 00:11:01,080
2 matrices, and so this

318
00:11:01,090 --> 00:11:03,670
should wipe out everything except

319
00:11:03,680 --> 00:11:06,410
for the diagonal entries and now

320
00:11:06,420 --> 00:11:08,770
I'm going to sum, sum of

321
00:11:08,780 --> 00:11:11,170
A of that and this

322
00:11:11,180 --> 00:11:14,470
gives me the sum of

323
00:11:14,480 --> 00:11:16,640
these diagonal elements, and indeed it is 369.

324
00:11:16,650 --> 00:11:20,230
You can sum up the other diagonal as well.

325
00:11:20,240 --> 00:11:22,390
So this top left to bottom right.

326
00:11:22,400 --> 00:11:24,170
You can sum up the opposite diagonal

327
00:11:24,180 --> 00:11:26,810
from bottom left to top right.

328
00:11:26,820 --> 00:11:30,190
The sum, the commands for this is somewhat more cryptic.

329
00:11:30,200 --> 00:11:31,530
You don't really need to know this.

330
00:11:31,540 --> 00:11:33,090
I'm just showing you just in

331
00:11:33,100 --> 00:11:34,760
case any of you are curious,

332
00:11:34,770 --> 00:11:37,590
but let's see.

333
00:11:37,600 --> 00:11:41,200
Flip UD stands for flip up/down.

334
00:11:41,210 --> 00:11:42,610
If you do that, that turns out

335
00:11:42,620 --> 00:11:44,330
to sum up the

336
00:11:44,340 --> 00:11:46,020
elements in the opposites of,

337
00:11:46,030 --> 00:11:49,380
the other diagonal that also sums up to 369.

338
00:11:49,390 --> 00:11:51,110
Here, let me show you,

339
00:11:51,120 --> 00:11:53,060
whereas i9 is this

340
00:11:53,070 --> 00:11:57,360
matrix, flip up/down of

341
00:11:57,370 --> 00:11:58,960
i9, you know, takes the identity

342
00:11:58,970 --> 00:12:00,790
matrix and flips it vertically

343
00:12:00,800 --> 00:12:01,810
so you end up with, excuse me,

344
00:12:01,820 --> 00:12:04,390
flip UD, end up

345
00:12:04,400 --> 00:12:07,750
with ones on this opposite diagonal as well.

346
00:12:08,770 --> 00:12:10,480
Just one last command and then

347
00:12:10,490 --> 00:12:12,750
that's it, and then that will be it for this video.

348
00:12:12,760 --> 00:12:13,680
Let's say A to be the

349
00:12:13,690 --> 00:12:16,100
3x3 magic square

350
00:12:16,110 --> 00:12:17,190
again. If you want

351
00:12:17,200 --> 00:12:18,460
to invert the matrix, you

352
00:12:18,470 --> 00:12:20,630
type P inv A, this

353
00:12:20,640 --> 00:12:23,600
is typically called a pseudo inference, but it doesn't matter.

354
00:12:23,610 --> 00:12:24,980
Think of it as basically the inverse

355
00:12:24,990 --> 00:12:26,950
of A and that's the

356
00:12:26,960 --> 00:12:28,260
inverse of A and second

357
00:12:28,270 --> 00:12:31,730
set, you know, 10 equals p

358
00:12:31,740 --> 00:12:33,570
of A and of temp times

359
00:12:33,580 --> 00:12:35,320
A. This is indeed the

360
00:12:35,330 --> 00:12:37,250
identity matrix with essentially ones

361
00:12:37,260 --> 00:12:38,730
on the diagonals and zeros on

362
00:12:38,740 --> 00:12:42,730
the off-diagonals, up to a numerical round-off.

363
00:12:44,120 --> 00:12:45,740
So, that's it for how

364
00:12:45,750 --> 00:12:48,420
to do different computational operations

365
00:12:48,430 --> 00:12:50,880
on the data in matrices.

366
00:12:50,890 --> 00:12:53,020
And after running a

367
00:12:53,030 --> 00:12:54,370
learning algorithm, often one of

368
00:12:54,380 --> 00:12:55,890
the most useful things is to

369
00:12:55,900 --> 00:12:57,220
be able to look at your

370
00:12:57,230 --> 00:13:00,010
results, or to plot, or visualize your result.

371
00:13:00,020 --> 00:13:01,660
And in the next video I'm

372
00:13:01,670 --> 00:13:03,170
going to very quickly show you

373
00:13:03,180 --> 00:13:04,290
how, again, with one or

374
00:13:04,300 --> 00:13:06,260
two lines of code using Octave

375
00:13:06,270 --> 00:13:07,840
you can quickly visualize your

376
00:13:07,850 --> 00:13:09,890
data, or plot your data

377
00:13:09,900 --> 00:13:11,090
and use that to better

378
00:13:11,100 --> 00:13:14,580
understand, you know, what your learning algorithms are doing.

