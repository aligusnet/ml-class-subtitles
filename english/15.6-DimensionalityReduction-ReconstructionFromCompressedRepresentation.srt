1
00:00:00,120 --> 00:00:01,680
In some of the earlier videos,

2
00:00:01,690 --> 00:00:03,400
I was talking about PCA as

3
00:00:03,410 --> 00:00:05,320
a compression algorithm where you

4
00:00:05,330 --> 00:00:07,260
may have say, a thousand dimensional

5
00:00:07,270 --> 00:00:09,090
data and compress it

6
00:00:09,100 --> 00:00:11,000
to a hundred dimensional feature back

7
00:00:11,010 --> 00:00:12,800
there, or have three dimensional

8
00:00:12,810 --> 00:00:16,350
data and compress it to a two dimensional representation.

9
00:00:16,360 --> 00:00:17,610
So, if this is a

10
00:00:17,620 --> 00:00:19,350
compression algorithm, there should

11
00:00:19,360 --> 00:00:20,650
be a way to go back from

12
00:00:20,660 --> 00:00:23,020
this compressed representation, back to

13
00:00:23,030 --> 00:00:26,330
an approximation of your original high dimensional data.

14
00:00:26,340 --> 00:00:28,770
So, given z(i), which maybe

15
00:00:28,780 --> 00:00:30,310
a hundred dimensional, how do

16
00:00:30,320 --> 00:00:32,040
you go back to your original

17
00:00:32,050 --> 00:00:35,750
representation x(i), which was maybe a thousand dimensional?

18
00:00:35,760 --> 00:00:36,920
In this video, I'd like to

19
00:00:36,930 --> 00:00:40,490
describe how to do that.

20
00:00:40,500 --> 00:00:43,930
In the PCA algorithm, we may have an example like this.

21
00:00:43,940 --> 00:00:45,900
So maybe that's my example x1

22
00:00:45,910 --> 00:00:48,100
and maybe that's my example x2.

23
00:00:48,110 --> 00:00:49,560
And what we do

24
00:00:49,570 --> 00:00:51,110
is, we take these examples and

25
00:00:51,120 --> 00:00:55,140
we project them onto this one dimensional surface.

26
00:00:55,150 --> 00:00:56,440
And then now we need

27
00:00:56,450 --> 00:00:58,340
to use only a real number,

28
00:00:58,350 --> 00:01:00,590
say z1, to specify the

29
00:01:00,600 --> 00:01:02,290
location of these points after

30
00:01:02,300 --> 00:01:04,880
they've been projected onto this one dimensional surface. So

31
00:01:04,890 --> 00:01:07,720
, given a point

32
00:01:07,730 --> 00:01:08,970
like this, given a point z1,

33
00:01:08,980 --> 00:01:10,990
how can we go back to

34
00:01:11,000 --> 00:01:13,280
this original two-dimensional space?

35
00:01:13,290 --> 00:01:15,500
And in particular, given the

36
00:01:15,510 --> 00:01:16,650
point z, which is an

37
00:01:16,660 --> 00:01:18,150
r, can we map

38
00:01:18,160 --> 00:01:20,430
this back to some approximate

39
00:01:20,440 --> 00:01:22,360
representation x and r2

40
00:01:22,370 --> 00:01:26,470
of whatever the original value of the data was?

41
00:01:26,520 --> 00:01:28,390
So, whereas z equals 0

42
00:01:28,400 --> 00:01:29,670
reduced transverse x, if you

43
00:01:29,680 --> 00:01:30,920
want to go in the opposite

44
00:01:30,930 --> 00:01:33,770
direction, the equation for

45
00:01:33,780 --> 00:01:35,280
that is, we're going

46
00:01:35,290 --> 00:01:39,720
to write x approx equals

47
00:01:40,470 --> 00:01:44,010
U reduce times z.

48
00:01:44,020 --> 00:01:45,940
Again, just to check the dimensions,

49
00:01:45,950 --> 00:01:47,960
here U reduce is

50
00:01:47,970 --> 00:01:49,670
going to be an n by k

51
00:01:49,680 --> 00:01:51,360
dimensional vector, z is

52
00:01:51,370 --> 00:01:54,020
going to be a k by 1 dimensional vector.

53
00:01:54,030 --> 00:01:56,710
So, we multiply these out and that's going to be n by one.

54
00:01:56,720 --> 00:01:58,440
So x approx is going

55
00:01:58,450 --> 00:02:00,300
to be an n dimensional vector.

56
00:02:00,310 --> 00:02:01,380
And so the intent of PCA,

57
00:02:01,390 --> 00:02:03,610
that is, the square projection error

58
00:02:03,620 --> 00:02:04,720
is not too big, is that

59
00:02:04,730 --> 00:02:06,490
this x approx will be

60
00:02:06,500 --> 00:02:08,950
close to whatever was

61
00:02:08,960 --> 00:02:10,260
the original value of x

62
00:02:10,270 --> 00:02:14,070
that you had used to derive z in the first place.

63
00:02:14,080 --> 00:02:16,860
To show a picture of what this looks like, this is what it looks like.

64
00:02:16,870 --> 00:02:17,960
What you get back of this

65
00:02:17,970 --> 00:02:19,910
procedure are points that lie

66
00:02:19,920 --> 00:02:23,490
on the projection of that onto the green line.

67
00:02:23,500 --> 00:02:24,910
So to take our early example,

68
00:02:24,920 --> 00:02:26,600
if we started off with

69
00:02:26,610 --> 00:02:28,840
this value of x1, and got

70
00:02:28,850 --> 00:02:30,300
this z1, if you plug

71
00:02:30,310 --> 00:02:33,430
z1 through this formula to get

72
00:02:33,440 --> 00:02:35,720
x1 approx, then this

73
00:02:35,730 --> 00:02:37,580
point here, that will be

74
00:02:37,590 --> 00:02:40,250
x1 approx, which is

75
00:02:40,260 --> 00:02:42,770
going to be r2 and so.

76
00:02:42,780 --> 00:02:44,170
And similarly, if you

77
00:02:44,180 --> 00:02:45,750
do the same procedure, this will

78
00:02:45,760 --> 00:02:49,340
be x2 approx.

79
00:02:49,640 --> 00:02:50,770
And you know, that's a pretty

80
00:02:50,780 --> 00:02:53,660
decent approximation to the original data.

81
00:02:53,670 --> 00:02:55,050
So, that's how you

82
00:02:55,060 --> 00:02:56,620
go back from your low dimensional

83
00:02:56,630 --> 00:02:58,690
representation z back to

84
00:02:58,700 --> 00:03:00,750
an uncompressed representation of

85
00:03:00,760 --> 00:03:02,230
the data we get back an

86
00:03:02,240 --> 00:03:03,680
the approxiamation to your original

87
00:03:03,690 --> 00:03:05,490
data x, and we

88
00:03:05,500 --> 00:03:08,210
also call this process reconstruction

89
00:03:08,220 --> 00:03:09,520
of the original data.

90
00:03:09,530 --> 00:03:11,300
When we think of trying to reconstruct

91
00:03:11,310 --> 00:03:15,130
the original value of x from the compressed representation.

92
00:03:16,770 --> 00:03:18,600
So, given an unlabeled data

93
00:03:18,610 --> 00:03:19,980
set, you now know how to

94
00:03:19,990 --> 00:03:21,960
apply PCA and take

95
00:03:21,970 --> 00:03:24,120
your high dimensional features x and

96
00:03:24,130 --> 00:03:25,550
map it to this

97
00:03:25,560 --> 00:03:27,390
lower dimensional representation z, and

98
00:03:27,400 --> 00:03:28,900
from this video, hopefully you now

99
00:03:28,910 --> 00:03:30,250
also know how to take

100
00:03:30,260 --> 00:03:31,850
these low representation z and

101
00:03:31,860 --> 00:03:33,690
map the backup to an approximation

102
00:03:33,700 --> 00:03:37,280
of your original high dimensional data.

103
00:03:37,300 --> 00:03:38,450
Now that you know how to

104
00:03:38,460 --> 00:03:40,460
implement in applying PCA, what

105
00:03:40,470 --> 00:03:41,380
we will like to do next is to

106
00:03:41,390 --> 00:03:42,280
talk about some of the

107
00:03:42,290 --> 00:03:43,980
mechanics of how to

108
00:03:43,990 --> 00:03:45,520
actually use PCA well,

109
00:03:45,530 --> 00:03:46,880
and in particular, in the next

110
00:03:46,890 --> 00:03:48,080
video, I like to talk

111
00:03:48,090 --> 00:03:49,900
about how to choose K, which is,

112
00:03:49,910 --> 00:03:51,550
how to choose the dimension

113
00:03:51,560 --> 00:03:55,070
of this reduced representation vector z.

